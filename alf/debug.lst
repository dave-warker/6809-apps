                      (    ./src/alf.asm):00001         ; "alf.asm" - main file for 6809 ALF (ALF's Like Forth) by Dave Warker
                      (    ./src/alf.asm):00002         ; Dave's latest attempt at a FORTH-like language.
                      (    ./src/alf.asm):00003         ; 2022-oct-14 dww  created.
                      (    ./src/alf.asm):00004         ;
                      (    ./src/alf.asm):00005         ; 6809 REGISTER USAGE:
                      (    ./src/alf.asm):00006         ; Y = (IP) Interpreter Pointer
                      (    ./src/alf.asm):00007         ; U = (RP) Return stack Pointer
                      (    ./src/alf.asm):00008         ; S = (PP) Parameter stack Pointer
                      (    ./src/alf.asm):00009         ; D,X are scratch registers for now
                      (    ./src/alf.asm):00010         ;
                      (    ./src/alf.asm):00011         ; MEMORY MAP (ON THE G6CC HARDWARE ROM)
                      (    ./src/alf.asm):00012         ; $DFFF +------------------------------+
                      (    ./src/alf.asm):00013         ;       | Alf R/O Kernel               |
                      (    ./src/alf.asm):00014         ; $C0FF +------------------------------+
                      (    ./src/alf.asm):00015         ;       | Direct Page Accessible Code  |
                      (    ./src/alf.asm):00016         ;       | & Entry Vectors              |
                      (    ./src/alf.asm):00017         ; $C000 +------------------------------+ <- DP register
                      (    ./src/alf.asm):00018         ;       :                              :
                      (    ./src/alf.asm):00019         ;       :                              :
                      (    ./src/alf.asm):00020         ; $7FFF +------------------------------+ <- end of RAM
                      (    ./src/alf.asm):00021         ;       | Reserved for Demon Debugger  |
                      (    ./src/alf.asm):00022         ; $7F00 +------------------------------+ <- initial RP (reg U)
                      (    ./src/alf.asm):00023         ;       | (RS) Return Stack            |
                      (    ./src/alf.asm):00024         ; $7E00 +------------------------------+ <- initial PP (reg S)
                      (    ./src/alf.asm):00025         ;       | (PS) Parameter Stack         |
                      (    ./src/alf.asm):00026         ;       +..............................+ <- current PP
                      (    ./src/alf.asm):00027         ;       : free space                   :
                      (    ./src/alf.asm):00028         ;       +..............................+ <- Dict Pointer (DP)
                      (    ./src/alf.asm):00029         ;       | User Defined Words           |
                      (    ./src/alf.asm):00030         ;       +------------------------------+
                      (    ./src/alf.asm):00031         ;       | Static Kernel Vars           |
                      (    ./src/alf.asm):00032         ; $0000 +------------------------------+
                      (    ./src/alf.asm):00033         ;
                      (    ./src/alf.asm):00034         ; NOTE: For debug builds kernel $C000-$DFFF is moved to $5000-$6FFF,
                      (    ./src/alf.asm):00035         ; RS to $4F00-$4FFF, and initial PS to $4F00.
                      (    ./src/alf.asm):00036         ;
                      (    ./src/alf.asm):00037         ; SYMBOL CONVENTIONS:
                      (    ./src/alf.asm):00038         ; Where needed, defined words have their code address labeled the same as the defined string.
                      (    ./src/alf.asm):00039         ; Where char not valid is a symbol are used I'll substitute something similar (e.g. foo? -> fooq).
                      (    ./src/alf.asm):00040         ; Internal words and labels not intended for the end user contain a '$'. Subroutines (as opposed
                      (    ./src/alf.asm):00041         ; to word list) symbols end with a '_'. Words that return a pointer end with a '&'. Words that
                      (    ./src/alf.asm):00042         ; set a specific state end with a '!'. Predicates that return true/false end with a '?' ('q' in label).
                      (    ./src/alf.asm):00043         ; No guarantee it will be 100% consistent but I'll try.
                      (    ./src/alf.asm):00044         ;
                      (    ./src/alf.asm):00045         ; STRINGS:
                      (    ./src/alf.asm):00046         ; Assuming most of our strings will be fairly short I'm using the old MacOS "pascal"
                      (    ./src/alf.asm):00047         ; string contention of length byte followed by the content bytes. Longer strings will
                      (    ./src/alf.asm):00048         ; have to be handled with a length word or some other contention.
                      (    ./src/alf.asm):00049         
                      (    ./src/alf.asm):00050                                 pragma  6809,dollarnotlocal,cescapes
                      (    ./src/alf.asm):00051         
                      (    ./src/alf.asm):00056         
                      (    ./src/alf.asm):00057                                 include "equ.asm"
                      (          equ.asm):00001         ; "equ.asm" - equates for Alf
                      (          equ.asm):00002         ; 2022-nov-18 dww  created
                      (          equ.asm):00003         
                      (          equ.asm):00004         ;@@@
                      (          equ.asm):00005         ;@@@ CONSTANTS
                      (          equ.asm):00006         ;@@@
                      (          equ.asm):00007         
     0001             (          equ.asm):00008         ALF_VER                 equ             1                                                       ;major version
     0006             (          equ.asm):00009         ALF_REV                 equ             6                                                       ;minor version
     DA5E             (          equ.asm):00010         ALF_WARM_ID             equ             $DA5E                                           ;Alf's warm boot flag
                      (          equ.asm):00011         ;
                      (          equ.asm):00012                 IFDEF DEBUG
     5000             (          equ.asm):00013         ALF_RO_ORG              equ             $5000                                           ;read/only area
     2000             (          equ.asm):00014         ALF_RO_SIZE             equ             $2000
     0000             (          equ.asm):00015         ALF_RW_ORG              equ             $0000                                           ;read/write area
     4FFF             (          equ.asm):00016         ALF_RW_SIZE             equ             $4FFF
                      (          equ.asm):00017                 ELSE
0000                  (          equ.asm):00018         ALF_RO_ORG              equ             $C000                                           ;read/only area
0000                  (          equ.asm):00019         ALF_RO_SIZE             equ             $2000
0000                  (          equ.asm):00020         ALF_RW_ORG              equ             $0000                                           ;read/write area
0000                  (          equ.asm):00021         ALF_RW_SIZE             equ             $7F00
                      (          equ.asm):00022                 ENDIF
                      (          equ.asm):00023         ;
     5000             (          equ.asm):00024         ALF_KER_ORG             equ             ALF_RO_ORG                                      ;start of kernel
     5000             (          equ.asm):00025         ALF_DP_ORG              equ             ALF_KER_ORG                                     ;start of DP accessible code
     0000             (          equ.asm):00026         ALF_SKV_ORG             equ             ALF_RW_ORG                                      ;start of static kernel vars
                      (          equ.asm):00027         ;
     0100             (          equ.asm):00028         ALF_RS_SIZE             equ             $0100                                           ;size of the return stack
     4FFF             (          equ.asm):00029         ALF_RS_TOP              equ             ALF_RW_ORG+ALF_RW_SIZE          ;top/initial return stack pointer
     4EFF             (          equ.asm):00030         ALF_RS_BOT              equ             ALF_RS_TOP-ALF_RS_SIZE          ;bottom/origin of return stack
                      (          equ.asm):00031         ;
     4EFF             (          equ.asm):00032         ALF_PS_TOP              equ             ALF_RS_BOT                                      ;top/initial param stack pointer
                      (          equ.asm):00033         ;
     00FF             (          equ.asm):00034         STR_MAX_LEN             equ             255                                                     ;longest string allowed
     007F             (          equ.asm):00035         RBC_BUF_LEN             equ             127                                                     ;console input buffer size
     00FF             (          equ.asm):00036         RBC_BUF_EMPTY   equ             $FF                                                     ;console input buffer empty flag
                      (          equ.asm):00037         
     000A             (          equ.asm):00038         NL                              equ             LF                                                      ;newline character
     0001             (          equ.asm):00039         CC_C                    equ             $01                                                     ;6809 Condition Code Carry flag bit
     9D00             (          equ.asm):00040         OP_JSR_DP               equ             $9D00                                           ;opcode word for JSR <addr
     6EB1             (          equ.asm):00041         OP_NEXT                 equ             $6EB1                                           ;opcode word for NEXT: JMP [,Y++]
                      (          equ.asm):00042         
                      (          equ.asm):00043         ;@@@
                      (          equ.asm):00044         ;@@@ MACROS:
                      (          equ.asm):00045         ;@@@
                      (          equ.asm):00046         
     0000             (          equ.asm):00047         _head           set             0                                                               ;head of the nucleus' word list
0000                  (          equ.asm):00048         DEF                     macro noexpand                                                  ;define a visible word's header
0000                  (          equ.asm):00049         @me                     set             *
                      (          equ.asm):00050                                 fcb             \1                                                              ;name length in bytes (MSB set = always execute)
                      (          equ.asm):00051                                 fcc             \2                                                              ;name
                      (          equ.asm):00052                                 fdb             _head
0000                  (          equ.asm):00053         _head           set             @me
                      (          equ.asm):00054                                 endm
     0080             (          equ.asm):00055         _EXE            equ             $80                                                             ;add to length to force execution
                      (          equ.asm):00056         
0000                  (          equ.asm):00057         NEXT            macro noexpand                                                  ;advance to next word
                      (          equ.asm):00058                                 jmp             [,y++]
                      (          equ.asm):00059                                 endm
                      (          equ.asm):00060         
0000                  (          equ.asm):00061         WORDS           macro noexpand                                                  ;start a new word list
                      (          equ.asm):00062                                 jsr             <words$
                      (          equ.asm):00063                                 endm
                      (          equ.asm):00064         
0000                  (          equ.asm):00065         DONE            macro noexpand                                                  ;done with current word list
                      (          equ.asm):00066                                 fdb             done$
                      (          equ.asm):00067                                 endm
                      (          equ.asm):00068         
0000                  (          equ.asm):00069         CONST           macro noexpand                                                  ;push constant value
                      (          equ.asm):00070                                 jsr             <const$
                      (          equ.asm):00071                                 endm
                      (          equ.asm):00072         
0000                  (          equ.asm):00073         VAR                     macro noexpand                                                  ;push variable address (same as const)
                      (          equ.asm):00074                                 jsr             <var$
                      (          equ.asm):00075                                 endm
                      (          equ.asm):00076         
0000                  (          equ.asm):00077         VAL                     macro noexpand                                                  ;push variable value
                      (          equ.asm):00078                                 jsr             <val$
                      (          equ.asm):00079                                 endm
     50               (    ./src/alf.asm):00058                                 setdp   ALF_DP_ORG/256
                      (    ./src/alf.asm):00059         
                      (    ./src/alf.asm):00060         ;@@@
                      (    ./src/alf.asm):00061         ;@@@ STATIC KERNEL VARS (READ/WRITE)
                      (    ./src/alf.asm):00062         ;@@@
                      (    ./src/alf.asm):00063                                 org     ALF_SKV_ORG
                      (    ./src/alf.asm):00064                                 include "skv.asm"
                      (          skv.asm):00001         ; "skv.asm" - static kernel variables for Alf
                      (          skv.asm):00002         ; 2022-dec-13 dww  created
                      (          skv.asm):00003         ;
                      (          skv.asm):00004         ; The holds the actual r/w storage for variables needed by the kernel.
                      (          skv.asm):00005         ; They can't live in the actual kernel code because that must be read/only.
                      (          skv.asm):00006         ; Assume this is all completely unitialized on a cold start.
                      (          skv.asm):00007         
0000                  (          skv.asm):00008         warm$           rmb             2                                               ;will be ALF_WARM_ID after cold start
                      (          skv.asm):00009         
0002                  (          skv.asm):00010         dp$                     rmb             2                                               ;next available dictionary storage addr
0004                  (          skv.asm):00011         defs$           rmb             2                                               ;head of defined words list
0006                  (          skv.asm):00012         def$$           rmb             2                                               ;0 or points to word being defined
0008                  (          skv.asm):00013         comp$           rmb             1                                               ;0 if executing else 1 if compiling
                      (          skv.asm):00014         
0009                  (          skv.asm):00015         loading$        rmb             1                                               ;normally 0, 1 if doing a "load"
000A                  (          skv.asm):00016         rdc$next        rmb             1                                               ;RBC_BUF_EMPTY or index of next buffer char
000B                  (          skv.asm):00017         rdc$buf         rmb             2+RBC_BUF_LEN                   ;console input buffer (max + lex + data)
008C                  (          skv.asm):00018         str$buf         rmb             2+STR_MAX_LEN                   ;temp string buffer
                      (          skv.asm):00019         
018D                  (          skv.asm):00020         base$           rmb             2                                               ;used for numeric printing
     018F             (    ./src/alf.asm):00065         alf_dp$         equ             *                                               ;initial dictionary pointer
                      (    ./src/alf.asm):00066         
                      (    ./src/alf.asm):00067         ;@@@
                      (    ./src/alf.asm):00068         ;@@@ KERNEL (READ/ONLY)
                      (    ./src/alf.asm):00069         ;@@@
                      (    ./src/alf.asm):00070                                 org             ALF_KER_ORG
                      (    ./src/alf.asm):00071                                 include "ker.asm"
                      (          ker.asm):00001         ; "ker.asm" - base of kernel code for Alf
                      (          ker.asm):00002         ; 2022-dec-13 dww  created
                      (          ker.asm):00003         ;
                      (          ker.asm):00004         ; This contains the start of the read/only kernel code.
                      (          ker.asm):00005         ; The first 256 bytes are accessible via the DP register.
                      (          ker.asm):00006         ; It starts with a header for use by the Demon debugger.
                      (          ker.asm):00007         
                      (          ker.asm):00008         ;@@@
                      (          ker.asm):00009         ;@@@ HEADER FOR USE BY THE DEMON DEBUGGER
                      (          ker.asm):00010         ;@@@
                      (          ker.asm):00011         
5000 7E5031           (          ker.asm):00012                                 jmp             cold_start                                              ;$00: cold start entry
5003 7E5034           (          ker.asm):00013                                 jmp             warm_start                                              ;$03: warm start entry
                      (          ker.asm):00014         
                      (          ker.asm):00015         ;@@@
                      (          ker.asm):00016         ;@@@ DP ACCESSIBLE CODE (MUST RESIDE IN DIRECT PAGE!)
                      (          ker.asm):00017         ;@@@
                      (          ker.asm):00018         
                      (          ker.asm):00019         ; >>> Begin executing a new word list
                      (          ker.asm):00020         ; CONSUMES:     0,PP = address of new list of words
5006 10AFC3           (          ker.asm):00021         words$          sty             ,--u                                                    ;push old IP to Return Stack
5009 3520             (          ker.asm):00022                                 puls    y                                                               ;pop new one from Param Stack
500B                  (          ker.asm):00023         next$           NEXT                                                                    ;execute first word in new list
500B 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (          ker.asm):00024         
                      (          ker.asm):00025         ; >>> Return to previous word list
                      (          ker.asm):00026         ; CONSUMES:     0,RP = word list address to resume execution
500D 3720             (          ker.asm):00027         done$           pulu    y                                                               ;restore IP from Return Stack
                      (          ker.asm):00028                                 NEXT                                                                    ;continue execution
500F 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (          ker.asm):00029         
                      (          ker.asm):00030         ; >>> Push constant value (also used to push variable address)
                      (          ker.asm):00031         ; PRODUCES: 0,PP = word at address on stack (return address of JSR)
5011 ECF4             (          ker.asm):00032         const$          ldd             [,s]                                                    ;D = value at return address
5013 EDE4             (          ker.asm):00033         @store          std             ,s                                                              ;replaces address
                      (          ker.asm):00034                                 NEXT
5015 6EB1             (             NEXT):00001                                 jmp             [,y++]
     5011             (          ker.asm):00035         var$            equ             const$                                                  ;also used for variable address
                      (          ker.asm):00036         ;
                      (          ker.asm):00037         ; >>> Push value of a variable
                      (          ker.asm):00038         ; PRODUCES: 0,PP = word at address given by word on stack (return address of JSR)
5017 AEF4             (          ker.asm):00039         val$            ldx             [,s]                                                    ;X = address of value
5019 EC84             (          ker.asm):00040                                 ldd             ,x                                                              ;D = value
501B 20F6             (          ker.asm):00041                                 bra             @store
                      (          ker.asm):00042         ;
                      (          ker.asm):00043         ; >>> Push address of string's length byte
                      (          ker.asm):00044         ; CONSUMES: 0,PP = address of string max length
                      (          ker.asm):00045         ; PRODUCES: 0,PP = address of string cur length byte (max + 1)
501D AEE4             (          ker.asm):00046         chars$          ldx             ,s                                                              ;X = addr of string max length
501F 3001             (          ker.asm):00047                                 leax    1,x                                                             ;X = addr of string cur length
5021 AFE4             (          ker.asm):00048                                 stx             ,s
                      (          ker.asm):00049                                 NEXT
5023 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (          ker.asm):00050         
                      (          ker.asm):00051         ; >>> Subroutine to set DP w/memory full check
                      (          ker.asm):00052         ; PASSED:  X = new DP value
                      (          ker.asm):00053         ; Bails if DP > PP
5025 BF0002           (          ker.asm):00054         set$dp          stx             dp$                                                             ;set new DP
5028 11BC0002         (          ker.asm):00055         mem$check       cmps    dp$
502C 10230322         (          ker.asm):00056                                 lbls    mem$full                                                ;bail if memory is full
5030 39               (          ker.asm):00057                                 rts
                      (          ker.asm):00058         
                      (          ker.asm):00059         ;@@@
                      (          ker.asm):00060         ;@@@ INITIALIZATION
                      (          ker.asm):00061         ;@@@
                      (          ker.asm):00062         
5031 7F0000           (          ker.asm):00063         cold_start      clr             warm$                                                   ;force cold start
5034 10CE4EFF         (          ker.asm):00064         warm_start      lds             #ALF_PS_TOP                                             ;ensure valid stack
5038 8650             (          ker.asm):00065                                 lda             #ALF_DP_ORG/256                                 ;and direct page
503A 1F8B             (          ker.asm):00066                                 tfr             a,dp
503C BD54B1           (          ker.asm):00067                                 jsr             con$init                                                ;initialize console I/O
                      (          ker.asm):00068         ;
503F CCDA5E           (          ker.asm):00069                                 ldd             #ALF_WARM_ID
5042 10B30000         (          ker.asm):00070                                 cmpd    warm$
5046 2715             (          ker.asm):00071                                 beq             @warm                                                   ;if can try warm start
5048 FD0000           (          ker.asm):00072                                 std             warm$                                                   ;else do a cold start
504B CC018F           (          ker.asm):00073                                 ldd             #alf_dp$                                                ;init start of dict
504E FD0002           (          ker.asm):00074                                 std             dp$
5051 CC5F5A           (          ker.asm):00075                                 ldd             #alf_defs$                                              ;and head of defs chain
5054 FD0004           (          ker.asm):00076                                 std             defs$
5057 CC0000           (          ker.asm):00077                                 ldd             #0
505A FD0006           (          ker.asm):00078                                 std             def$$                                                   ;no current definition
                      (          ker.asm):00079         ;
505D 86FF             (          ker.asm):00080         @warm           lda             #STR_MAX_LEN                                    ;ensure proper buffer sizes
505F B7008C           (          ker.asm):00081                                 sta             str$buf
5062 867F             (          ker.asm):00082                                 lda             #RBC_BUF_LEN
5064 B7000B           (          ker.asm):00083                                 sta             rdc$buf
5067 7E506A           (          ker.asm):00084                                 jmp             repl                                                    ;start up the loop
                      (    ./src/alf.asm):00072                                 include "repl.asm"
                      (         repl.asm):00001         ; "repl.asm" - Read, Eval, Print Loop for Alf
                      (         repl.asm):00002         ; 2022-nov-18 dww  created
                      (         repl.asm):00003         
                      (         repl.asm):00004         ;@@@
                      (         repl.asm):00005         ;@@@ Read, Eval, Print Loop
                      (         repl.asm):00006         ;@@@
                      (         repl.asm):00007         
                      (         repl.asm):00008         ; >>> Initialize interpreter
506A 8E507F           (         repl.asm):00009         repl            ldx             #@greet                                                 ;X = greeting message
506D 10CE4EFF         (         repl.asm):00010         bailx_          lds             #ALF_PS_TOP                                             ;initialize stacks
5071 CE4FFF           (         repl.asm):00011                                 ldu             #ALF_RS_TOP
5074 7F0008           (         repl.asm):00012                                 clr             comp$                                                   ;executing, not compiling
5077 3410             (         repl.asm):00013                                 pshs    x                                                               ;0,PP = greeting string
5079 318D000C         (         repl.asm):00014                                 leay    repl$,pcr                                               ;start the REPL!
                      (         repl.asm):00015                                 NEXT
507D 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         repl.asm):00016         ;
507F 09616C662076312E (         repl.asm):00017         @greet          fcb             9,'a','l','f',' ','v',ALF_VER+'0','.',ALF_REV+'0',NL
     360A
                      (         repl.asm):00018         
                      (         repl.asm):00019         ; >>> Initialize and start Read, Eval, Print Loop (REPL)
                      (         repl.asm):00020         ; Assumes we enter with a message to display on the top of the Param Stack.
5089 5499             (         repl.asm):00021         repl$           fdb             prs                                                             ;display message
508B 5B78             (         repl.asm):00022                                 fdb             def$can                                                 ;cancel any in-progress definition
508D 53E9             (         repl.asm):00023                                 fdb             rdl$can                                                 ;cancel current line buffer
508F 53A6             (         repl.asm):00024                                 fdb             eof                                                             ;terminate loading
                      (         repl.asm):00025         ;
5091 5371             (         repl.asm):00026         @lp                     fdb             stk$check                                               ;check for stack overflow
5093 5220             (         repl.asm):00027                                 fdb             rd$tok                                                  ;read symbol or string
5095 563950D1         (         repl.asm):00028                                 fdb             jt$,@str                                                ;if it's a string
                      (         repl.asm):00029         ;
                      (         repl.asm):00030         ; Look for the symbol at DP in the list of defined words.
                      (         repl.asm):00031         ; Execute it if we're not compiling or if the word should always be executed.
                      (         repl.asm):00032         ; Otherwise, compile it's code address at DP and continue.
                      (         repl.asm):00033         ;
5099 5B165106         (         repl.asm):00034                                 fdb             dp,defq                                                 ;look for it's definition
509D 562B50B9         (         repl.asm):00035                                 fdb             jf$,@num?                                               ;if it's not there
                      (         repl.asm):00036         ;
50A1 5153             (         repl.asm):00037                                 fdb             def_tick                                                ;get precedence, code address
50A3 563950AD         (         repl.asm):00038                                 fdb             jt$,@exec                                               ;if must execute it
50A7 52D3563950B3     (         repl.asm):00039                                 fdb             compq,jt$,@comp                                 ;if compiling
                      (         repl.asm):00040         ;
50AD 52F5             (         repl.asm):00041         @exec           fdb             go$                                                             ;execute it
50AF 56205091         (         repl.asm):00042                                 fdb             jp$,@lp                                                 ;get next
                      (         repl.asm):00043         ;
50B3 5BDB             (         repl.asm):00044         @comp           fdb             compw                                                   ;compile it
50B5 56205091         (         repl.asm):00045                                 fdb             jp$,@lp                                                 ;get next
                      (         repl.asm):00046         ;
                      (         repl.asm):00047         ; Check if it's a numeric constant and compile or push it if so
                      (         repl.asm):00048         ;
50B9 5B16516D         (         repl.asm):00049         @num?           fdb             dp,numq                                                 ;try for number
50BD 562B50E9         (         repl.asm):00050                                 fdb             jf$,@undef                                              ;if not a valid number
                      (         repl.asm):00051         ;
50C1 52D3562B5091     (         repl.asm):00052                                 fdb             compq,jf$,@lp                                   ;leave it on stack if executing
50C7 5BEE5BF25BDB     (         repl.asm):00053                                 fdb             complw,pushlw,compw                             ;else compile code to push it
50CD 56205091         (         repl.asm):00054                                 fdb             jp$,@lp                                                 ;and process next
                      (         repl.asm):00055         ;
                      (         repl.asm):00056         ; Process a quoted string (in s$)
                      (         repl.asm):00057         ;
50D1 52D3563950DD     (         repl.asm):00058         @str            fdb             compq,jt$,@comps                                ;if compiling
50D7 5C83             (         repl.asm):00059                                 fdb             str$                                                    ;else push addr of transient string
50D9 56205091         (         repl.asm):00060                                 fdb             jp$,@lp                                                 ;and process next
                      (         repl.asm):00061         ;
50DD 5BEE5CD7         (         repl.asm):00062         @comps          fdb             complw,pushls$                                  ;compile push literal string word
50E1 5C835CB9         (         repl.asm):00063                                 fdb             str$,comps                                              ;then compile string
50E5 56205091         (         repl.asm):00064                                 fdb             jp$,@lp                                                 ;and process next
                      (         repl.asm):00065         ;
                      (         repl.asm):00066         ; Undefined word
                      (         repl.asm):00067         ;
50E9 5B165499         (         repl.asm):00068         @undef          fdb             dp,prs                                                  ;word is undefined
50ED 50FB             (         repl.asm):00069                                 fdb             bail$
50EF 033F070A         (         repl.asm):00070                                 fcb             3,'?',BEL,NL
                      (         repl.asm):00071         
                      (         repl.asm):00072         ; >>> Bail out. Display message and restart the REPL.
                      (         repl.asm):00073         ; CONSUMES: IP = address of bail message string
                      (         repl.asm):00074                                 DEF             5,"bail$"
     50F3             (              DEF):00001         @me                     set             *
50F3 05               (              DEF):00002                                 fcb             5                                                               ;name length in bytes (MSB set = always execute)
50F4 6261696C24       (              DEF):00003                                 fcc             "bail$"                                                         ;name
50F9 0000             (              DEF):00004                                 fdb             _head
     50F3             (              DEF):00005         _head           set             @me
50FB 1F21             (         repl.asm):00075         bail$           tfr             y,x                                                             ;X = message
50FD 0E6D             (         repl.asm):00076                                 jmp             bailx_
                      (         repl.asm):00077         
                      (         repl.asm):00078         ; >>> Default prompt string (none)
     0000             (         repl.asm):00079         alf$prompt      equ             0
                      (         repl.asm):00080         
                      (         repl.asm):00081         ; >>> Search for definition of a word
                      (         repl.asm):00082         ; CONSUMES: 0,PP = address of word name string
                      (         repl.asm):00083         ; PRODUCES: 0,PP = 0 if not found else 0,PP = 1, 2,PP = address of word's header
                      (         repl.asm):00084                                 DEF             4,"def?"
     50FF             (              DEF):00001         @me                     set             *
50FF 04               (              DEF):00002                                 fcb             4                                                               ;name length in bytes (MSB set = always execute)
5100 6465663F         (              DEF):00003                                 fcc             "def?"                                                          ;name
5104 50F3             (              DEF):00004                                 fdb             _head
     50FF             (              DEF):00005         _head           set             @me
5106 3420             (         repl.asm):00085         defq            pshs    y
                      (         repl.asm):00086         ;
5108 318DAEF8         (         repl.asm):00087                                 leay    defs$,pcr                                               ;Y = addr of head of defs list
510C 10AEA4           (         repl.asm):00088         @clp            ldy             ,y                                                              ;Y = next def in chain
510F 2723             (         repl.asm):00089                                 beq             @fail                                                   ;if end of chain
                      (         repl.asm):00090         ;
5111 3420             (         repl.asm):00091                                 pshs    y                                                               ;save start of list word def
5113 E6A0             (         repl.asm):00092                                 ldb             ,y+
5115 C47F             (         repl.asm):00093                                 andb    #$7F                                                    ;B = length of list word name
5117 AE64             (         repl.asm):00094                                 ldx             4,s                                                             ;X = target name
5119 E180             (         repl.asm):00095                                 cmpb    ,x+
511B 2611             (         repl.asm):00096                                 bne             @skip                                                   ;if lengths don't match
                      (         repl.asm):00097         ;
511D 2006             (         repl.asm):00098                                 bra             @dec                                                    ;first byte (lengths) already matched
511F A680             (         repl.asm):00099         @nlp            lda             ,x+
5121 A1A0             (         repl.asm):00100                                 cmpa    ,y+
5123 2609             (         repl.asm):00101                                 bne             @skip                                                   ;if doesn't match
5125 5A               (         repl.asm):00102         @dec            decb
5126 2AF7             (         repl.asm):00103                                 bpl             @nlp                                                    ;if not end of name yet
                      (         repl.asm):00104         ;
5128 3526             (         repl.asm):00105                                 puls    d,y                                                             ;restore IP, D = def addr
512A EDE4             (         repl.asm):00106                                 std             ,s                                                              ;overwrite target name with word addr
512C 201A             (         repl.asm):00107                                 bra             push1                                                   ;and a 1 because found it
                      (         repl.asm):00108         ;
512E 3262             (         repl.asm):00109         @skip           leas    2,s                                                             ;drop start of word
5130 31A5             (         repl.asm):00110                                 leay    b,y                                                             ;Y = word's link addr
5132 20D8             (         repl.asm):00111                                 bra             @clp                                                    ;try next
                      (         repl.asm):00112         ;
5134 3520             (         repl.asm):00113         @fail           puls    y                                                               ;restore IP
5136 3262             (         repl.asm):00114                                 leas    2,s                                                             ;drop target name addr
5138 2004             (         repl.asm):00115                                 bra             push0                                                   ;push 0 becuase not found
                      (         repl.asm):00116         
                      (         repl.asm):00117         ; >>> Push constant 0
                      (         repl.asm):00118         ; PRODUCES: 0,PP = 0
                      (         repl.asm):00119                                 DEF             1,"0"
     513A             (              DEF):00001         @me                     set             *
513A 01               (              DEF):00002                                 fcb             1                                                               ;name length in bytes (MSB set = always execute)
513B 30               (              DEF):00003                                 fcc             "0"                                                             ;name
513C 50FF             (              DEF):00004                                 fdb             _head
     513A             (              DEF):00005         _head           set             @me
513E 5F               (         repl.asm):00120         push0           clrb                                                                    ;B = 0
513F 4F               (         repl.asm):00121         @push           clra                                                                    ;D = value
5140 3406             (         repl.asm):00122                                 pshs    d
                      (         repl.asm):00123                                 NEXT
5142 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         repl.asm):00124         ;
                      (         repl.asm):00125         ; >>> Push constant 1
                      (         repl.asm):00126         ; PRODUCES: 0,PP = 1
                      (         repl.asm):00127                                 DEF             1,"1"
     5144             (              DEF):00001         @me                     set             *
5144 01               (              DEF):00002                                 fcb             1                                                               ;name length in bytes (MSB set = always execute)
5145 31               (              DEF):00003                                 fcc             "1"                                                             ;name
5146 513A             (              DEF):00004                                 fdb             _head
     5144             (              DEF):00005         _head           set             @me
5148 C601             (         repl.asm):00128         push1           ldb             #1                                                              ;B = 1
514A 20F3             (         repl.asm):00129                                 bra             @push
                      (         repl.asm):00130         
                      (         repl.asm):00131         ; >>> Get info about a definition for a word
                      (         repl.asm):00132         ; CONSUMES: 0,PP = address of word header (name)
                      (         repl.asm):00133         ; PRODUCES: 0,PP = 0 if normal else 1 if always execute; 2,PP = code address
                      (         repl.asm):00134                                 DEF             4,"def\'"
     514C             (              DEF):00001         @me                     set             *
514C 04               (              DEF):00002                                 fcb             4                                                               ;name length in bytes (MSB set = always execute)
514D 64656627         (              DEF):00003                                 fcc             "def'"                                                          ;name
5151 5144             (              DEF):00004                                 fdb             _head
     514C             (              DEF):00005         _head           set             @me
5153 3510             (         repl.asm):00135         def_tick        puls    x                                                               ;X = word address
5155 E680             (         repl.asm):00136                                 ldb             ,x+                                                             ;B = word's name length + precedence
5157 1F98             (         repl.asm):00137                                 tfr             b,a
                      (         repl.asm):00138         ;
5159 C47F             (         repl.asm):00139                                 andb    #$7F                                                    ;B = name length
515B 3085             (         repl.asm):00140                                 leax    b,x
515D 3002             (         repl.asm):00141                                 leax    2,x                                                             ;X = word's code address
515F 3410             (         repl.asm):00142                                 pshs    x
                      (         repl.asm):00143         ;
5161 4D               (         repl.asm):00144                                 tsta
5162 2BE4             (         repl.asm):00145                                 bmi             push1                                                   ;if always execute
5164 20D8             (         repl.asm):00146                                 bra             push0                                                   ;else normal word
                      (         repl.asm):00147         
                      (         repl.asm):00148         ; >>> Try to convert string to a number
                      (         repl.asm):00149         ; CONSUMES: 0,PP = addr of string
                      (         repl.asm):00150         ; PRODUCES: 0,PP = 0 if not a number else 0,PP = 1, 2,PP = value
                      (         repl.asm):00151                                 DEF             4,"num?"
     5166             (              DEF):00001         @me                     set             *
5166 04               (              DEF):00002                                 fcb             4                                                               ;name length in bytes (MSB set = always execute)
5167 6E756D3F         (              DEF):00003                                 fcc             "num?"                                                          ;name
516B 514C             (              DEF):00004                                 fdb             _head
     5166             (              DEF):00005         _head           set             @me
516D 3510             (         repl.asm):00152         numq            puls    x                                                               ;X = string addr
516F E680             (         repl.asm):00153                                 ldb             ,x+                                                             ;X = char addr, B = count
5171 27CB             (         repl.asm):00154                                 beq             push0                                                   ;if empty string
5173 3420             (         repl.asm):00155                                 pshs    y                                                               ;save IP
5175 8D08             (         repl.asm):00156                                 bsr             @neg?                                                   ;CS if failed else D = value
5177 3520             (         repl.asm):00157                                 puls    y
5179 25C3             (         repl.asm):00158                                 bcs             push0                                                   ;if failed
517B 3406             (         repl.asm):00159                                 pshs    d                                                               ;else succeeded
517D 20C9             (         repl.asm):00160                                 bra             push1
                      (         repl.asm):00161         ;
                      (         repl.asm):00162         ; Handle negative numbers
517F A684             (         repl.asm):00163         @neg?           lda             ,x                                                              ;A = first char
5181 812D             (         repl.asm):00164                                 cmpa    #'-'
5183 260F             (         repl.asm):00165                                 bne             @base?                                                  ;if not negative number
5185 3001             (         repl.asm):00166                                 leax    1,x                                                             ;else eat the sign
5187 5A               (         repl.asm):00167                                 decb
5188 8D0A             (         repl.asm):00168                                 bsr             @base?                                                  ;try to convert
518A 2507             (         repl.asm):00169                                 bcs             @ret                                                    ;if failed
518C 43               (         repl.asm):00170                                 coma
518D 53               (         repl.asm):00171                                 comb
518E C30001           (         repl.asm):00172                                 addd    #1                                                              ;D = -D
5191 1CFE             (         repl.asm):00173         @succ           andcc   #~CC_C                                                  ;return CC
5193 39               (         repl.asm):00174         @ret            rts
                      (         repl.asm):00175         ;
                      (         repl.asm):00176         ; Check for number base prefix (ala C: 0x = 16, 0b = 2, else 10)
5194 C102             (         repl.asm):00177         @base?          cmpb    #2                                                              ;long enough for base prefix?
5196 251C             (         repl.asm):00178                                 blo             @dec                                                    ;nope
5198 A684             (         repl.asm):00179                                 lda             ,x                                                              ;A = next char
519A 8130             (         repl.asm):00180                                 cmpa    #'0'
519C 2616             (         repl.asm):00181                                 bne             @dec                                                    ;if def not base prefix
519E A601             (         repl.asm):00182                                 lda             1,x                                                             ;A = 2nd char
51A0 8178             (         repl.asm):00183                                 cmpa    #'x'
51A2 2708             (         repl.asm):00184                                 beq             @hex                                                    ;if want hex base
51A4 8162             (         repl.asm):00185                                 cmpa    #'b'
51A6 260C             (         repl.asm):00186                                 bne             @dec                                                    ;if not binary base
                      (         repl.asm):00187         ;
51A8 8602             (         repl.asm):00188                                 lda             #2                                                              ;use base 2
51AA 2002             (         repl.asm):00189                                 bra             @base
                      (         repl.asm):00190         ;
51AC 8610             (         repl.asm):00191         @hex            lda             #16                                                             ;use base 16
51AE 3002             (         repl.asm):00192         @base           leax    2,x                                                             ;eat the prefix
51B0 C002             (         repl.asm):00193                                 subb    #2
51B2 2002             (         repl.asm):00194                                 bra             @digs
                      (         repl.asm):00195         ;
51B4 860A             (         repl.asm):00196         @dec            lda             #10                                                             ;use base 10
                      (         repl.asm):00197         ;
                      (         repl.asm):00198         ; Collect digits of number
51B6 3406             (         repl.asm):00199         @digs           pshs    a,b                                                             ;0,s = base, 1,s = count
51B8 5D               (         repl.asm):00200                                 tstb
51B9 2728             (         repl.asm):00201                                 beq             @fail                                                   ;if no digits at all
                      (         repl.asm):00202         ;
51BB 108E0000         (         repl.asm):00203                                 ldy             #0                                                              ;Y = value
51BF A680             (         repl.asm):00204         @diglp          lda             ,x+                                                             ;A = next digit
51C1 8D25             (         repl.asm):00205                                 bsr             @dig                                                    ;convert to digit value
51C3 A1E4             (         repl.asm):00206                                 cmpa    ,s
51C5 241C             (         repl.asm):00207                                 bhs             @fail                                                   ;if it's not valid for our base
                      (         repl.asm):00208         ;
51C7 3402             (         repl.asm):00209                                 pshs    a                                                               ;0,s = digit
51C9 1F20             (         repl.asm):00210                                 tfr             y,d
51CB A661             (         repl.asm):00211                                 lda             1,s                                                             ;A = base, B = low byte of value
51CD 3D               (         repl.asm):00212                                 mul
51CE 1E02             (         repl.asm):00213                                 exg             d,y
51D0 E661             (         repl.asm):00214                                 ldb             1,s                                                             ;A = high byte, B = base
51D2 3D               (         repl.asm):00215                                 mul                                                                             ;(could check for overflow here)
51D3 1E89             (         repl.asm):00216                                 exg             a,b
51D5 3504             (         repl.asm):00217                                 puls    b
51D7 31AB             (         repl.asm):00218                                 leay    d,y                                                             ;Y = Y * base + digit
                      (         repl.asm):00219         ;
51D9 6A61             (         repl.asm):00220                                 dec             1,s
51DB 26E2             (         repl.asm):00221                                 bne             @diglp                                                  ;if there's more
                      (         repl.asm):00222         ;
                      (         repl.asm):00223         ; Valid number
51DD 3262             (         repl.asm):00224                                 leas    2,s                                                             ;drop base, count
51DF 1F20             (         repl.asm):00225                                 tfr             y,d                                                             ;D = number
51E1 20AE             (         repl.asm):00226                                 bra             @succ                                                   ;return CC
                      (         repl.asm):00227         ;
                      (         repl.asm):00228         ; Not a valid number
51E3 3262             (         repl.asm):00229         @fail           leas    2,s                                                             ;drop base, count
51E5 1A01             (         repl.asm):00230                                 orcc    #CC_C                                                   ;return CS
51E7 39               (         repl.asm):00231                                 rts
                      (         repl.asm):00232         ;
                      (         repl.asm):00233         ; Convert char in A to digit value
                      (         repl.asm):00234         ; Returns known invalid digit (MSB set) if not a digit
51E8 8139             (         repl.asm):00235         @dig            cmpa    #'9'
51EA 2204             (         repl.asm):00236                                 bhi             @let?                                                   ;if not decimal digit
51EC 8030             (         repl.asm):00237                                 suba    #'0'
51EE 20A3             (         repl.asm):00238                                 bra             @ret                                                    ;valid digit or MSB set for bad one
                      (         repl.asm):00239         ;
51F0 84DF             (         repl.asm):00240         @let?           anda    #$DF                                                    ;force lower case
51F2 8041             (         repl.asm):00241                                 suba    #'A'
51F4 259D             (         repl.asm):00242                                 blo             @ret                                                    ;if not valid letter return MSB set
51F6 8B0A             (         repl.asm):00243                                 adda    #10                                                             ;A-Z -> 10-25 for bases up to 26
51F8 8123             (         repl.asm):00244                                 cmpa    #10+'Z'-'A'
51FA 2397             (         repl.asm):00245                                 bls             @ret                                                    ;if it's a valid letter digit
51FC 86FF             (         repl.asm):00246                                 lda             #$FF                                                    ;else return invalid digit
51FE 39               (         repl.asm):00247                                 rts
                      (         repl.asm):00248         
                      (         repl.asm):00249         ; >>> Read Symbol
                      (         repl.asm):00250         ; Reads next (whitespace delimited) symbol to DP, bails if they provide a string
51FF                  (         repl.asm):00251         rd$sym          WORDS
51FF 9D06             (            WORDS):00001                                 jsr             <words$
5201 5220             (         repl.asm):00252                                 fdb             rd$tok                                                  ;get next token
5203 56395209         (         repl.asm):00253                                 fdb             jt$,@bail                                               ;bail if got a string instead
                      (         repl.asm):00254                                 DONE
5207 500D             (             DONE):00001                                 fdb             done$
                      (         repl.asm):00255         ;
5209 50FB             (         repl.asm):00256         @bail           fdb             bail$                                                   ;string not allowed
520B 14537472696E6720 (         repl.asm):00257                                 fcb             20,'S','t','r','i','n','g',' ','n','o','t',' ','a','l','l','o','w','e','d','!',BEL
     6E6F7420616C6C6F
     7765642107
                      (         repl.asm):00258         
                      (         repl.asm):00259         ; >>> Read Token
                      (         repl.asm):00260         ; PRODUCES: 0,PP = 0 if got symbol (at DP) else 1 if got quoted string (at s$)
5220 8D72             (         repl.asm):00261         rd$tok          bsr             @rdnc                                                   ;skip CTL chars
5222 C120             (         repl.asm):00262                                 cmpb    #' '
5224 27FA             (         repl.asm):00263                                 beq             rd$tok                                                  ;and spaces
                      (         repl.asm):00264         ;
5226 C122             (         repl.asm):00265                                 cmpb    #DQUOT
5228 272F             (         repl.asm):00266                                 beq             @str                                                    ;if it's a quoted string
                      (         repl.asm):00267         ;
                      (         repl.asm):00268         ; Assume it's a symbol delimited by whitespace (max len 127 bytes)
                      (         repl.asm):00269         ; Copy it to DP.
                      (         repl.asm):00270         ;
522A BE0002           (         repl.asm):00271                                 ldx             dp$                                                             ;stash it at DP
522D 6F84             (         repl.asm):00272                                 clr             ,x                                                              ;first byte is length
522F 6C84             (         repl.asm):00273         @symlp          inc             ,x                                                              ;bump length
5231 2B0E             (         repl.asm):00274                                 bmi             @symtl                                                  ;if too long
5233 A684             (         repl.asm):00275                                 lda             ,x
5235 E786             (         repl.asm):00276                                 stb             a,x                                                             ;stash char
5237 BD53C3           (         repl.asm):00277                                 jsr             rdc_                                                    ;next char
523A C120             (         repl.asm):00278                                 cmpb    #$20
523C 22F1             (         repl.asm):00279                                 bhi             @symlp                                                  ;if not end
523E 7E513E           (         repl.asm):00280                                 jmp             push0                                                   ;push 0 for symbol
                      (         repl.asm):00281         ;
5241 308D0002         (         repl.asm):00282         @symtl          leax    @symtlm,pcr                                             ;bail on symbol too long
5245 0E6D             (         repl.asm):00283         @bail           jmp             bailx_
5247 1153796D626F6C20 (         repl.asm):00284         @symtlm         fcb             17,'S','y','m','b','o','l',' ','t','o','o',' ','l','o','n','g','!',BEL
     746F6F206C6F6E67
     2107
                      (         repl.asm):00285         ;
                      (         repl.asm):00286         ; It's a quoted string (max len 255)
                      (         repl.asm):00287         ; Copy it to s$ transient string buffer.
                      (         repl.asm):00288         ;
5259 3420             (         repl.asm):00289         @str            pshs    y                                                               ;preserve IP
525B 318DAE2E         (         repl.asm):00290                                 leay    str$buf+1,pcr                                   ;stash it in transient string buffer
525F 6FA4             (         repl.asm):00291                                 clr             ,y                                                              ;init to empty string
5261 8D31             (         repl.asm):00292         @strlp          bsr             @rdnc                                                   ;next non-CTL char
5263 C122             (         repl.asm):00293                                 cmpb    #DQUOT
5265 2735             (         repl.asm):00294                                 beq             @eos                                                    ;if end of string
5267 C15C             (         repl.asm):00295                                 cmpb    #BSLASH
5269 2713             (         repl.asm):00296                                 beq             @esc                                                    ;if escape prefix
                      (         repl.asm):00297         ;
526B 6CA4             (         repl.asm):00298         @adds           inc             ,y                                                              ;add B to string
526D 2744             (         repl.asm):00299                                 beq             @strtl                                                  ;if string > 255 bytes
526F A6A4             (         repl.asm):00300                                 lda             ,y
5271 A13F             (         repl.asm):00301                                 cmpa    -1,y
5273 223E             (         repl.asm):00302                                 bhi             @strtl                                                  ;if dest is full
5275 1F21             (         repl.asm):00303                                 tfr             y,x                                                             ;else store char
5277 1E89             (         repl.asm):00304                                 exg             a,b                                                             ;A = char, B = UNSIGNED index
5279 3A               (         repl.asm):00305                                 abx
527A A784             (         repl.asm):00306                                 sta             ,x
527C 20E3             (         repl.asm):00307                                 bra             @strlp                                                  ;get next
                      (         repl.asm):00308         ;
527E 8D14             (         repl.asm):00309         @esc            bsr             @rdnc                                                   ;B = escaped char
5280 308D001D         (         repl.asm):00310                                 leax    @escs,pcr                                               ;X = list of special escapes (0 ends)
5284 6D84             (         repl.asm):00311         @esclp          tst             ,x
5286 27E3             (         repl.asm):00312                                 beq             @adds                                                   ;if not in list add it as-is
5288 E180             (         repl.asm):00313                                 cmpb    ,x+
528A 2704             (         repl.asm):00314                                 beq             @escsub                                                 ;if it's a special escape
528C 3001             (         repl.asm):00315                                 leax    1,x
528E 20F4             (         repl.asm):00316                                 bra             @esclp                                                  ;else try next
5290 E684             (         repl.asm):00317         @escsub         ldb             ,x                                                              ;B = special substitute char
5292 20D7             (         repl.asm):00318                                 bra             @adds
                      (         repl.asm):00319         ;
5294 BD53C3           (         repl.asm):00320         @rdnc           jsr             rdc_                                                    ;read next char
5297 C11F             (         repl.asm):00321                                 cmpb    #$1F
5299 23F9             (         repl.asm):00322                                 bls             @rdnc                                                   ;ignoring controls
529B 39               (         repl.asm):00323                                 rts
                      (         repl.asm):00324         ;
529C 3520             (         repl.asm):00325         @eos            puls    y                                                               ;restore IP
529E 7E5148           (         repl.asm):00326                                 jmp             push1                                                   ;push 1 for string
                      (         repl.asm):00327         ;
52A1 61076208651B660C (         repl.asm):00328         @escs           fcb             'a',BEL,'b',BS,'e',ESC,'f',FF,'n',LF,'r',CR,'t',HT,'v',VT,'0',0
     6E0A720D7409760B
     3000
                      (         repl.asm):00329         ;
52B3 308D0002         (         repl.asm):00330         @strtl          leax    @strtlm,pcr                                             ;string too long
52B7 208C             (         repl.asm):00331                                 bra             @bail
52B9 11537472696E6720 (         repl.asm):00332         @strtlm         fcb             17,'S','t','r','i','n','g',' ','t','o','o',' ','l','o','n','g','!',BEL
     746F6F206C6F6E67
     2107
                      (         repl.asm):00333         
                      (         repl.asm):00334         ; >>> Are we compiling?
                      (         repl.asm):00335         ; PRODUCES: 0,PP = 0 if executing else 1 if compiling
                      (         repl.asm):00336                                 DEF             5,"comp?"
     52CB             (              DEF):00001         @me                     set             *
52CB 05               (              DEF):00002                                 fcb             5                                                               ;name length in bytes (MSB set = always execute)
52CC 636F6D703F       (              DEF):00003                                 fcc             "comp?"                                                         ;name
52D1 5166             (              DEF):00004                                 fdb             _head
     52CB             (              DEF):00005         _head           set             @me
52D3 F60008           (         repl.asm):00337         compq           ldb             comp$
52D6 4F               (         repl.asm):00338                                 clra
52D7 3406             (         repl.asm):00339                                 pshs    d
                      (         repl.asm):00340                                 NEXT
52D9 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         repl.asm):00341         
                      (         repl.asm):00342         ; >>> Set mode to executing
                      (         repl.asm):00343                                 DEF             _EXE+1,"{"
     52DB             (              DEF):00001         @me                     set             *
52DB 81               (              DEF):00002                                 fcb             _EXE+1                                                          ;name length in bytes (MSB set = always execute)
52DC 7B               (              DEF):00003                                 fcc             "{"                                                             ;name
52DD 52CB             (              DEF):00004                                 fdb             _head
     52DB             (              DEF):00005         _head           set             @me
52DF 7F0008           (         repl.asm):00344         set_exec        clr             comp$
                      (         repl.asm):00345                                 NEXT
52E2 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         repl.asm):00346         
                      (         repl.asm):00347         ; >>> Set mode to compiling
                      (         repl.asm):00348                                 DEF             1,"}"
     52E4             (              DEF):00001         @me                     set             *
52E4 01               (              DEF):00002                                 fcb             1                                                               ;name length in bytes (MSB set = always execute)
52E5 7D               (              DEF):00003                                 fcc             "}"                                                             ;name
52E6 52DB             (              DEF):00004                                 fdb             _head
     52E4             (              DEF):00005         _head           set             @me
52E8 C601             (         repl.asm):00349         set_comp        ldb             #1
52EA F70008           (         repl.asm):00350                                 stb             comp$
                      (         repl.asm):00351                                 NEXT
52ED 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         repl.asm):00352         
                      (         repl.asm):00353         ; >>> Execute a word
                      (         repl.asm):00354         ; CONSUMES: 0,PP = a word's code address
                      (         repl.asm):00355                                 DEF             3,"go$"
     52EF             (              DEF):00001         @me                     set             *
52EF 03               (              DEF):00002                                 fcb             3                                                               ;name length in bytes (MSB set = always execute)
52F0 676F24           (              DEF):00003                                 fcc             "go$"                                                           ;name
52F3 52E4             (              DEF):00004                                 fdb             _head
     52EF             (              DEF):00005         _head           set             @me
52F5 39               (         repl.asm):00356         go$                     rts                                                                                     ;jump to addr on stack
                      (         repl.asm):00357         
                      (         repl.asm):00358         ; >>> Marks currently being defined word (if any) as always execute.
                      (         repl.asm):00359         ; CONSUMES: 0,PP = word's header address
                      (         repl.asm):00360                                 DEF             _EXE+6,"<exec!"
     52F6             (              DEF):00001         @me                     set             *
52F6 86               (              DEF):00002                                 fcb             _EXE+6                                                          ;name length in bytes (MSB set = always execute)
52F7 3C6578656321     (              DEF):00003                                 fcc             "<exec!"                                                                ;name
52FD 52EF             (              DEF):00004                                 fdb             _head
     52F6             (              DEF):00005         _head           set             @me
52FF BE0006           (         repl.asm):00361                                 ldx             def$$                                                           ;X = word being defined
5302 2706             (         repl.asm):00362                                 beq             @next                                                           ;if not defining a word
5304 C680             (         repl.asm):00363                                 ldb             #_EXE                                                           ;turn on execute flag
5306 EA84             (         repl.asm):00364                                 orb             ,x
5308 E784             (         repl.asm):00365                                 stb             ,x
530A                  (         repl.asm):00366         @next           NEXT
530A 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         repl.asm):00367         
                      (         repl.asm):00368         ; >>> Bail if not compiling (compile or die)
                      (         repl.asm):00369                                 DEF             _EXE+6,"comp?!"
     530C             (              DEF):00001         @me                     set             *
530C 86               (              DEF):00002                                 fcb             _EXE+6                                                          ;name length in bytes (MSB set = always execute)
530D 636F6D703F21     (              DEF):00003                                 fcc             "comp?!"                                                                ;name
5313 52F6             (              DEF):00004                                 fdb             _head
     530C             (              DEF):00005         _head           set             @me
5315 7D0008           (         repl.asm):00370         comp_only       tst             comp$
5318 2702             (         repl.asm):00371                                 beq             @bail                                                           ;if not compiling
                      (         repl.asm):00372                                 NEXT
531A 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         repl.asm):00373         ;
531C 308D0002         (         repl.asm):00374         @bail           leax    @msg,pcr
5320 0E6D             (         repl.asm):00375                                 jmp             bailx_
5322 0F636F6D70696C65 (         repl.asm):00376         @msg            fcb             15,'c','o','m','p','i','l','e',' ','o','n','l','y','!',BEL,NL
     206F6E6C7921070A
                      (         repl.asm):00377         
                      (         repl.asm):00378         ; >>> Inline comment (can span multiple lines)
                      (         repl.asm):00379         ; ( <comment> )
                      (         repl.asm):00380         ; NOTE: Also stops at EOT.
                      (         repl.asm):00381                                 DEF             _EXE+1,"("
     5332             (              DEF):00001         @me                     set             *
5332 81               (              DEF):00002                                 fcb             _EXE+1                                                          ;name length in bytes (MSB set = always execute)
5333 28               (              DEF):00003                                 fcc             "("                                                             ;name
5334 530C             (              DEF):00004                                 fdb             _head
     5332             (              DEF):00005         _head           set             @me
5336 8629             (         repl.asm):00382                                 lda             #')'                                                            ;terminator
5338 2007             (         repl.asm):00383                                 bra             @comm
                      (         repl.asm):00384         ;
                      (         repl.asm):00385         ; >>> Single line comment, ends at NL or EOT
                      (         repl.asm):00386         ; (( <comment> NL
                      (         repl.asm):00387                                 DEF             _EXE+2,"(("
     533A             (              DEF):00001         @me                     set             *
533A 82               (              DEF):00002                                 fcb             _EXE+2                                                          ;name length in bytes (MSB set = always execute)
533B 2828             (              DEF):00003                                 fcc             "(("                                                            ;name
533D 5332             (              DEF):00004                                 fdb             _head
     533A             (              DEF):00005         _head           set             @me
533F 860A             (         repl.asm):00388                                 lda             #NL
5341 3402             (         repl.asm):00389         @comm           pshs    a                                                                       ;save delimiter
5343 BD53C3           (         repl.asm):00390         @commlp         jsr             rdc_                                                            ;read next char
5346 E1E4             (         repl.asm):00391                                 cmpb    ,s
5348 2704             (         repl.asm):00392                                 beq             @done                                                           ;if it's the delimiter
534A C104             (         repl.asm):00393                                 cmpb    #EOT
534C 26F5             (         repl.asm):00394                                 bne             @commlp                                                         ;if it's not EOF char
                      (         repl.asm):00395         ;
534E 3261             (         repl.asm):00396         @done           leas    1,s
                      (         repl.asm):00397                                 NEXT
5350 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         repl.asm):00398         
                      (         repl.asm):00399         ; >>> Bail with memory full error
5352 8E5357           (         repl.asm):00400         mem$full        ldx             #@msg
5355 0E6D             (         repl.asm):00401                                 jmp             bailx_
5357 0D4D656D6F727920 (         repl.asm):00402         @msg            fcb             13,'M','e','m','o','r','y',' ','f','u','l','l','!',BEL
     66756C6C2107
                      (         repl.asm):00403         
                      (         repl.asm):00404         ; >>> Bail with stack overflow error
                      (         repl.asm):00405         
                      (         repl.asm):00406         ; >>> Check for stack overflow (hit DP)
                      (         repl.asm):00407         ; Bails if PP <= DP
                      (         repl.asm):00408                                 DEF             9,"stk$check"
     5365             (              DEF):00001         @me                     set             *
5365 09               (              DEF):00002                                 fcb             9                                                               ;name length in bytes (MSB set = always execute)
5366 73746B2463686563 (              DEF):00003                                 fcc             "stk$check"                                                             ;name
     6B
536F 533A             (              DEF):00004                                 fdb             _head
     5365             (              DEF):00005         _head           set             @me
5371 11BC0002         (         repl.asm):00409         stk$check       cmps    dp$
5375 2302             (         repl.asm):00410                                 bls     stk$over                                                        ;bail if stack overflowed
                      (         repl.asm):00411                                 NEXT
5377 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         repl.asm):00412         ;
5379 8E537E           (         repl.asm):00413         stk$over        ldx             #@msg
537C 0E6D             (         repl.asm):00414                                 jmp             bailx_
537E 10537461636B206F (         repl.asm):00415         @msg            fcb             16,'S','t','a','c','k',' ','o','v','e','r','f','l','o','w','!',BEL
     766572666C6F7721
     07
                      (    ./src/alf.asm):00073                                 include "con.asm"
                      (          con.asm):00001         ; "con.asm" - console I/O for Alf
                      (          con.asm):00002         ; 2022-nov-18 dww  created
                      (          con.asm):00003         
                      (          con.asm):00004         ;@@@
                      (          con.asm):00005         ;@@@ CORE CONSOLE I/O
                      (          con.asm):00006         ;@@@
                      (          con.asm):00007         
                      (          con.asm):00008         ; >>> Start loading a file from the console
                      (          con.asm):00009         ; Sets the loading flag which causes us to emit XOFF/XONs to the console
                      (          con.asm):00010         ; as needed to keep it from sending charactets faster than we can process them.
                      (          con.asm):00011         ; Basically we keep the console paused until we need a line of input.
                      (          con.asm):00012                                 DEF             4,"load"
     538F             (              DEF):00001         @me                     set             *
538F 04               (              DEF):00002                                 fcb             4                                                               ;name length in bytes (MSB set = always execute)
5390 6C6F6164         (              DEF):00003                                 fcc             "load"                                                          ;name
5394 5365             (              DEF):00004                                 fdb             _head
     538F             (              DEF):00005         _head           set             @me
5396 8601             (          con.asm):00013                                 lda             #1                                                              ;set flag that we're loading
5398 B70009           (          con.asm):00014                                 sta             loading$
539B BD54C7           (          con.asm):00015                                 jsr             con$pause                                               ;pause console until we need data
                      (          con.asm):00016                                 NEXT
539E 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (          con.asm):00017         
                      (          con.asm):00018         ; >>> Stop loading (end of file)
                      (          con.asm):00019                                 DEF             3,"eof"
     53A0             (              DEF):00001         @me                     set             *
53A0 03               (              DEF):00002                                 fcb             3                                                               ;name length in bytes (MSB set = always execute)
53A1 656F66           (              DEF):00003                                 fcc             "eof"                                                           ;name
53A4 538F             (              DEF):00004                                 fdb             _head
     53A0             (              DEF):00005         _head           set             @me
53A6 8D02             (          con.asm):00020         eof                     bsr             eof_                                                    ;stop loading
                      (          con.asm):00021                                 NEXT
53A8 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (          con.asm):00022         ;
53AA 7D0009           (          con.asm):00023         eof_            tst             loading$                                                ;are we loading?
53AD 2706             (          con.asm):00024                                 beq             @ret                                                    ;nope
53AF 7F0009           (          con.asm):00025                                 clr             loading$                                                ;yep, turn off loading state flag
53B2 BD54CD           (          con.asm):00026                                 jsr             con$resume                                              ;make sure console isn't paused
53B5 39               (          con.asm):00027         @ret            rts
                      (          con.asm):00028         
                      (          con.asm):00029         ; >>> Read next char from the console buffer
                      (          con.asm):00030         ; rdc -> <char>
                      (          con.asm):00031                                 DEF             3,"rdc"
     53B6             (              DEF):00001         @me                     set             *
53B6 03               (              DEF):00002                                 fcb             3                                                               ;name length in bytes (MSB set = always execute)
53B7 726463           (              DEF):00003                                 fcc             "rdc"                                                           ;name
53BA 53A0             (              DEF):00004                                 fdb             _head
     53B6             (              DEF):00005         _head           set             @me
53BC 8D05             (          con.asm):00032         rdc                     bsr             rdc_                                                    ;B = read char
53BE 4F               (          con.asm):00033                                 clra
53BF 3406             (          con.asm):00034                                 pshs    d
                      (          con.asm):00035                                 NEXT
53C1 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (          con.asm):00036         ;
53C3 3410             (          con.asm):00037         rdc_            pshs    x
53C5 8E000C           (          con.asm):00038         @try            ldx             #rdc$buf+1                                              ;X = addr of line buffer cur length
53C8 B6000A           (          con.asm):00039                                 lda             rdc$next                                                ;A = index for next char
53CB 2B10             (          con.asm):00040                                 bmi             @rdl                                                    ;if need to read a line
53CD 4C               (          con.asm):00041                                 inca                                                                    ;bump to actual index (and next char)
53CE 2714             (          con.asm):00042                                 beq             @eol                                                    ;if wrap then must be end of line
53D0 A184             (          con.asm):00043                                 cmpa    ,x
53D2 2210             (          con.asm):00044                                 bhi             @eol                                                    ;if hit current end of buffer
53D4 E686             (          con.asm):00045                                 ldb             a,x                                                             ;B = char
53D6 B7000A           (          con.asm):00046         @gotc           sta             rdc$next                                                ;update index
53D9 4F               (          con.asm):00047                                 clra                                                                    ;D = char
53DA 3510             (          con.asm):00048                                 puls    x
53DC 39               (          con.asm):00049                                 rts
                      (          con.asm):00050         ;
53DD 8D1D             (          con.asm):00051         @rdl            bsr             rdl_                                                    ;read line to X
53DF 7F000A           (          con.asm):00052                                 clr             rdc$next                                                ;buffer not empty now
53E2 20E1             (          con.asm):00053                                 bra             @try
                      (          con.asm):00054         ;
53E4 CCFF0A           (          con.asm):00055         @eol            ldd             #RBC_BUF_EMPTY*256+NL                   ;mark buf empty, return NL
53E7 20ED             (          con.asm):00056                                 bra             @gotc
                      (          con.asm):00057         
                      (          con.asm):00058         ; >>> Cancel current line buffer contents
53E9 C6FF             (          con.asm):00059         rdl$can         ldb             #RBC_BUF_EMPTY
53EB F7000A           (          con.asm):00060                                 stb             rdc$next
                      (          con.asm):00061                                 NEXT
53EE 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (          con.asm):00062         
                      (          con.asm):00063         ; >>> Read a line from the console with optional prompt
                      (          con.asm):00064         ; <buf> rdl
                      (          con.asm):00065                                 DEF             3,"rdl"
     53F0             (              DEF):00001         @me                     set             *
53F0 03               (              DEF):00002                                 fcb             3                                                               ;name length in bytes (MSB set = always execute)
53F1 72646C           (              DEF):00003                                 fcc             "rdl"                                                           ;name
53F4 53B6             (              DEF):00004                                 fdb             _head
     53F0             (              DEF):00005         _head           set             @me
53F6 3510             (          con.asm):00066                                 puls    x                                                               ;X = string buffer address
53F8 8D02             (          con.asm):00067                                 bsr             rdl_
                      (          con.asm):00068                                 NEXT
53FA 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (          con.asm):00069         ;
                      (          con.asm):00070         ; PASSED:  X = addr of buffer (-1,x = max len; 0,X = current len, 1,X = start of contents)
53FC 6F84             (          con.asm):00071         rdl_            clr             ,x                                                              ;char count = 0
53FE 7D0009           (          con.asm):00072                                 tst             loading$
5401 2703             (          con.asm):00073                                 beq             @lp                                                             ;if not loading from console
5403 BD54CD           (          con.asm):00074                                 jsr             con$resume                                              ;else resume console input
5406 BD54BC           (          con.asm):00075         @lp                     jsr             con$rdcq                                                ;wait for next (unbuffered) input char
5409 27FB             (          con.asm):00076                                 beq             @lp
540B C120             (          con.asm):00077                                 cmpb    #$20
540D 251A             (          con.asm):00078                                 blo             @ctls                                                   ;if it's a control char
540F C17E             (          con.asm):00079                                 cmpb    #$7E
5411 22F3             (          con.asm):00080                                 bhi             @lp                                                             ;ignore non-printables
                      (          con.asm):00081         ;
5413 A684             (          con.asm):00082                                 lda             ,x                                                              ;A = current count
5415 4C               (          con.asm):00083                                 inca                                                                    ;want to add one more
5416 27EE             (          con.asm):00084                                 beq             @lp                                                             ;can't if wrap (sanity check)
5418 A11F             (          con.asm):00085                                 cmpa    -1,x
541A 24EA             (          con.asm):00086                                 bhs             @lp                                                             ;or if it's full
541C A784             (          con.asm):00087                                 sta             ,x                                                              ;update current length
541E E786             (          con.asm):00088                                 stb             a,x                                                             ;store char in buffer
5420 7D0009           (          con.asm):00089                                 tst             loading$
5423 26E1             (          con.asm):00090                                 bne             @lp                                                             ;don't echo if loading
5425 8D35             (          con.asm):00091                                 bsr             prc_                                                    ;echo it
5427 20DD             (          con.asm):00092                                 bra             @lp                                                             ;and get next
                      (          con.asm):00093         ;
5429 C108             (          con.asm):00094         @ctls           cmpb    #BS
542B 2610             (          con.asm):00095                                 bne             @eol?                                                   ;if not backspace
542D 6D84             (          con.asm):00096                                 tst             ,x
542F 27D5             (          con.asm):00097                                 beq             @lp                                                             ;ignore if at start of buffer
5431 6A84             (          con.asm):00098                                 dec             ,x                                                              ;one less char
5433 8D25             (          con.asm):00099                                 bsr             prb_                                                    ;erase prev char
5435 C620             (          con.asm):00100                                 ldb             #' '
5437 8D23             (          con.asm):00101                                 bsr             prc_
5439 8D1F             (          con.asm):00102                                 bsr             prb_
543B 20C9             (          con.asm):00103                                 bra             @lp                                                             ;and try for another
                      (          con.asm):00104         ;
543D C10D             (          con.asm):00105         @eol?           cmpb    #CR
543F 2704             (          con.asm):00106                                 beq             @eol                                                    ;CR = end of line
5441 C10A             (          con.asm):00107                                 cmpb    #LF
5443 26C1             (          con.asm):00108                                 bne             @lp                                                             ;LF also = end of line
5445 7D0009           (          con.asm):00109         @eol            tst             loading$
5448 1026007B         (          con.asm):00110                                 lbne    con$pause                                               ;else pause input while we process the line
544C 2012             (          con.asm):00111                                 bra             nl_
                      (          con.asm):00112         
                      (          con.asm):00113         ; >>> Output a character
                      (          con.asm):00114         ; CONSUMES: 0,PP = character to output
                      (          con.asm):00115                                 DEF             3,"prc"
     544E             (              DEF):00001         @me                     set             *
544E 03               (              DEF):00002                                 fcb             3                                                               ;name length in bytes (MSB set = always execute)
544F 707263           (              DEF):00003                                 fcc             "prc"                                                           ;name
5452 53F0             (              DEF):00004                                 fdb             _head
     544E             (              DEF):00005         _head           set             @me
5454 3506             (          con.asm):00116         prc                     puls    d                                                               ;B = char to output
5456 8D04             (          con.asm):00117                                 bsr             prc_
                      (          con.asm):00118                                 NEXT
5458 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (          con.asm):00119         ;
545A C608             (          con.asm):00120         prb_            ldb             #BS
545C C10A             (          con.asm):00121         prc_            cmpb    #NL                                                             ;NL outputs CR,LF
545E 2673             (          con.asm):00122                                 bne             con$prc                                                 ;normal char
5460 C60D             (          con.asm):00123         nl_                     ldb             #CR
5462 8D6F             (          con.asm):00124                                 bsr             con$prc
5464 C60A             (          con.asm):00125                                 ldb             #LF
5466 206B             (          con.asm):00126                                 bra             con$prc
                      (          con.asm):00127         
                      (          con.asm):00128         ; >>> Print N spaces
                      (          con.asm):00129                                 DEF             3,"sps"
     5468             (              DEF):00001         @me                     set             *
5468 03               (              DEF):00002                                 fcb             3                                                               ;name length in bytes (MSB set = always execute)
5469 737073           (              DEF):00003                                 fcc             "sps"                                                           ;name
546C 544E             (              DEF):00004                                 fdb             _head
     5468             (              DEF):00005         _head           set             @me
546E 3510             (          con.asm):00130                                 puls    x
5470 8C0000           (          con.asm):00131         @lp                     cmpx    #0
5473 2708             (          con.asm):00132                                 beq             @done
5475 C620             (          con.asm):00133                                 ldb             #' '
5477 8DE3             (          con.asm):00134                                 bsr             prc_
5479 301F             (          con.asm):00135                                 leax    -1,x
547B 20F3             (          con.asm):00136                                 bra             @lp
                      (          con.asm):00137         ;
547D                  (          con.asm):00138         @done           next
547D 6EB1             (             next):00001                                 jmp             [,y++]
                      (          con.asm):00139         
                      (          con.asm):00140         ; >>> Print (display) a space
                      (          con.asm):00141                                 DEF             2,"sp"
     547F             (              DEF):00001         @me                     set             *
547F 02               (              DEF):00002                                 fcb             2                                                               ;name length in bytes (MSB set = always execute)
5480 7370             (              DEF):00003                                 fcc             "sp"                                                            ;name
5482 5468             (              DEF):00004                                 fdb             _head
     547F             (              DEF):00005         _head           set             @me
5484 C620             (          con.asm):00142                                 ldb             #' '
5486 8DD4             (          con.asm):00143                                 bsr             prc_
                      (          con.asm):00144                                 NEXT
5488 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (          con.asm):00145         
                      (          con.asm):00146         ; >>> Print (display) a newline
                      (          con.asm):00147                                 DEF             2,"nl"
     548A             (              DEF):00001         @me                     set             *
548A 02               (              DEF):00002                                 fcb             2                                                               ;name length in bytes (MSB set = always execute)
548B 6E6C             (              DEF):00003                                 fcc             "nl"                                                            ;name
548D 547F             (              DEF):00004                                 fdb             _head
     548A             (              DEF):00005         _head           set             @me
548F 8DCF             (          con.asm):00148                                 bsr             nl_
                      (          con.asm):00149                                 NEXT
5491 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (          con.asm):00150         
                      (          con.asm):00151         ; >>> Print a string to the console
                      (          con.asm):00152         ; CONSUMES: 0,PP = addr of string
                      (          con.asm):00153                                 DEF             3,"prs"
     5493             (              DEF):00001         @me                     set             *
5493 03               (              DEF):00002                                 fcb             3                                                               ;name length in bytes (MSB set = always execute)
5494 707273           (              DEF):00003                                 fcc             "prs"                                                           ;name
5497 548A             (              DEF):00004                                 fdb             _head
     5493             (              DEF):00005         _head           set             @me
5499 3510             (          con.asm):00154         prs                     puls    x                                                               ;X = string addr
549B 8D02             (          con.asm):00155                                 bsr             prs_
                      (          con.asm):00156                                 NEXT
549D 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (          con.asm):00157         ;
                      (          con.asm):00158         ; >>> Subroutine to print a string to the console
                      (          con.asm):00159         ; PASSED:  X = string to print
549F E680             (          con.asm):00160         prs_            ldb             ,x+                                                             ;X = start
54A1 3404             (          con.asm):00161                                 pshs    b                                                               ;,S = length
54A3 2007             (          con.asm):00162                                 bra             @done?
                      (          con.asm):00163         ;
54A5 E680             (          con.asm):00164         @lp                     ldb             ,x+                                                             ;display next char
54A7 BD545C           (          con.asm):00165                                 jsr             prc_
54AA 6AE4             (          con.asm):00166                                 dec             ,s
54AC 26F7             (          con.asm):00167         @done?          bne             @lp                                                             ;if more to display
                      (          con.asm):00168         ;
54AE 3261             (          con.asm):00169                                 leas    1,s
54B0 39               (          con.asm):00170                                 rts
                      (          con.asm):00171         
                      (          con.asm):00172         ;@@@
                      (          con.asm):00173         ;@@@ RAW (HARDWARE) CONSOLE I/O
                      (          con.asm):00174         ;@@@
                      (          con.asm):00175         
                      (          con.asm):00176         ; >>> Console initialization (for Grant's 6 Chip Computer h/w)
                      (          con.asm):00177         ; 115200 baud, 8N1, RTS=0, RX INT enabled (in case wired for h/w handshake)
54B1 8603             (          con.asm):00178         con$init        lda             #ACIA_CTL_CDS_MRESET
54B3 B7A000           (          con.asm):00179                                 sta             G6CC_ACIA_CTL
54B6 8695             (          con.asm):00180                                 lda             #ACIA_CTL_CDS_BY_16+ACIA_CTL_WS_8N1+ACIA_CTL_TC_RTS0_TXI0+ACIA_CTL_RXI_1
54B8 B7A000           (          con.asm):00181                                 sta             G6CC_ACIA_CTL
54BB 39               (          con.asm):00182                                 rts
                      (          con.asm):00183         
                      (          con.asm):00184         ; >>> Poll for raw console input (for Grant's 6 Chip Computer h/w)
                      (          con.asm):00185         ; RETURNS: NE,B = input char else EQ,B = 0 if none avail
54BC F6A000           (          con.asm):00186         con$rdcq        ldb             G6CC_ACIA_STAT
54BF C401             (          con.asm):00187                                 andb    #ACIA_STAT_RDRF_MASK
54C1 2703             (          con.asm):00188                                 beq             @ret
54C3 F6A001           (          con.asm):00189                                 ldb             G6CC_ACIA_DATA
54C6 39               (          con.asm):00190         @ret            rts
                      (          con.asm):00191         
                      (          con.asm):00192         ; >>> Pause console input (set RTS=1)
54C7 86D5             (          con.asm):00193         con$pause       lda             #ACIA_CTL_CDS_BY_16+ACIA_CTL_WS_8N1+ACIA_CTL_TC_RTS1_TXI0+ACIA_CTL_RXI_1
54C9 B7A000           (          con.asm):00194                                 sta             G6CC_ACIA_CTL
54CC 39               (          con.asm):00195                                 rts
                      (          con.asm):00196         
                      (          con.asm):00197         ; >>> Resume console input (set RTS=0)
54CD 8695             (          con.asm):00198         con$resume      lda             #ACIA_CTL_CDS_BY_16+ACIA_CTL_WS_8N1+ACIA_CTL_TC_RTS0_TXI0+ACIA_CTL_RXI_1
54CF B7A000           (          con.asm):00199                                 sta             G6CC_ACIA_CTL
54D2 39               (          con.asm):00200                                 rts
                      (          con.asm):00201         
                      (          con.asm):00202         ; >>> Grant's 6 Chip Computer: Display character
                      (          con.asm):00203         ; PASSED:  B = character to display
54D3 8602             (          con.asm):00204         con$prc         lda             #ACIA_STAT_TDRE_MASK
54D5 B5A000           (          con.asm):00205         @wait           bita    G6CC_ACIA_STAT
54D8 27FB             (          con.asm):00206                                 beq             @wait
54DA F7A001           (          con.asm):00207                                 stb             G6CC_ACIA_DATA
54DD 39               (          con.asm):00208                                 rts
                      (    ./src/alf.asm):00074                                 include "bops.asm"
                      (         bops.asm):00001         ; "bops.asm" - basic stack operations for Alf
                      (         bops.asm):00002         ; 2022-nov-18 dww  created
                      (         bops.asm):00003         
                      (         bops.asm):00004         ;@@@
                      (         bops.asm):00005         ;@@@ PARAMETER STACK MANIPULATION
                      (         bops.asm):00006         ;@@@
                      (         bops.asm):00007         
                      (         bops.asm):00008         ; >>> Fetch word at addr
                      (         bops.asm):00009         ; CONSUMES: 0,PP = address
                      (         bops.asm):00010         ; PRODUCES: 0,PP = word at address
                      (         bops.asm):00011                                 DEF             1,"@"
     54DE             (              DEF):00001         @me                     set             *
54DE 01               (              DEF):00002                                 fcb             1                                                               ;name length in bytes (MSB set = always execute)
54DF 40               (              DEF):00003                                 fcc             "@"                                                             ;name
54E0 5493             (              DEF):00004                                 fdb             _head
     54DE             (              DEF):00005         _head           set             @me
54E2 AEE4             (         bops.asm):00012         at                      ldx             ,s
54E4 EC84             (         bops.asm):00013                                 ldd             ,x
54E6 EDE4             (         bops.asm):00014         @at                     std             ,s
                      (         bops.asm):00015                                 NEXT
54E8 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         bops.asm):00016         ;
                      (         bops.asm):00017         ; >>> Fetch byte at addr
                      (         bops.asm):00018         ; CONSUMES: 0,PP = address
                      (         bops.asm):00019         ; PRODUCES: 0,PP = byte at address
                      (         bops.asm):00020                                 DEF             2,".@"
     54EA             (              DEF):00001         @me                     set             *
54EA 02               (              DEF):00002                                 fcb             2                                                               ;name length in bytes (MSB set = always execute)
54EB 2E40             (              DEF):00003                                 fcc             ".@"                                                            ;name
54ED 54DE             (              DEF):00004                                 fdb             _head
     54EA             (              DEF):00005         _head           set             @me
54EF AEE4             (         bops.asm):00021         bat                     ldx             ,s
54F1 E684             (         bops.asm):00022                                 ldb             ,x
54F3 4F               (         bops.asm):00023                                 clra
54F4 20F0             (         bops.asm):00024                                 bra             @at
                      (         bops.asm):00025         
                      (         bops.asm):00026         ; >>> Store word at address (because '=' means assign dammit)
                      (         bops.asm):00027         ; CONSUMES: 0,PP = address, 2,PP = value to store there
                      (         bops.asm):00028                                 DEF             1,"="
     54F6             (              DEF):00001         @me                     set             *
54F6 01               (              DEF):00002                                 fcb             1                                                               ;name length in bytes (MSB set = always execute)
54F7 3D               (              DEF):00003                                 fcc             "="                                                             ;name
54F8 54EA             (              DEF):00004                                 fdb             _head
     54F6             (              DEF):00005         _head           set             @me
54FA 3510             (         bops.asm):00029         store           puls    x                                                                       ;X = address
54FC 3506             (         bops.asm):00030                                 puls    d                                                                       ;D = value
54FE ED84             (         bops.asm):00031                                 std             ,x
                      (         bops.asm):00032                                 NEXT
5500 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         bops.asm):00033         
                      (         bops.asm):00034         ; >>> Store byte at address (because '=' means assign dammit)
                      (         bops.asm):00035         ; CONSUMES: 0,PP = address, 2,PP = byte value to store there
                      (         bops.asm):00036                                 DEF             2,".="
     5502             (              DEF):00001         @me                     set             *
5502 02               (              DEF):00002                                 fcb             2                                                               ;name length in bytes (MSB set = always execute)
5503 2E3D             (              DEF):00003                                 fcc             ".="                                                            ;name
5505 54F6             (              DEF):00004                                 fdb             _head
     5502             (              DEF):00005         _head           set             @me
5507 3510             (         bops.asm):00037         bstore          puls    x                                                                       ;X = address
5509 3506             (         bops.asm):00038                                 puls    d                                                                       ;B = value
550B E784             (         bops.asm):00039                                 stb             ,x
                      (         bops.asm):00040                                 NEXT
550D 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         bops.asm):00041         
                      (         bops.asm):00042         ; >>> Duplicate top of stack
                      (         bops.asm):00043         ; PRODUCES: 0,PP = copy of 2,PP
                      (         bops.asm):00044                                 DEF             3,"dup"
     550F             (              DEF):00001         @me                     set             *
550F 03               (              DEF):00002                                 fcb             3                                                               ;name length in bytes (MSB set = always execute)
5510 647570           (              DEF):00003                                 fcc             "dup"                                                           ;name
5513 5502             (              DEF):00004                                 fdb             _head
     550F             (              DEF):00005         _head           set             @me
5515 ECE4             (         bops.asm):00045         dup                     ldd             ,s
5517 3406             (         bops.asm):00046                                 pshs    d
                      (         bops.asm):00047                                 NEXT
5519 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         bops.asm):00048         
                      (         bops.asm):00049         ; >>> Duplicate top 2 stack entries
                      (         bops.asm):00050         ; PRODUCES: 0,PP, 2,PP = copies of 4,PP, 6,PP respectively
                      (         bops.asm):00051                                 DEF             4,"dup2"
     551B             (              DEF):00001         @me                     set             *
551B 04               (              DEF):00002                                 fcb             4                                                               ;name length in bytes (MSB set = always execute)
551C 64757032         (              DEF):00003                                 fcc             "dup2"                                                          ;name
5520 550F             (              DEF):00004                                 fdb             _head
     551B             (              DEF):00005         _head           set             @me
5522 ECE4             (         bops.asm):00052         dup2            ldd             ,s
5524 AE62             (         bops.asm):00053                                 ldx             2,s
5526 3416             (         bops.asm):00054                                 pshs    d,x
                      (         bops.asm):00055                                 NEXT
5528 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         bops.asm):00056         
                      (         bops.asm):00057         ; >>> Swap top two stack entries
                      (         bops.asm):00058                                 DEF             4,"swap"
     552A             (              DEF):00001         @me                     set             *
552A 04               (              DEF):00002                                 fcb             4                                                               ;name length in bytes (MSB set = always execute)
552B 73776170         (              DEF):00003                                 fcc             "swap"                                                          ;name
552F 551B             (              DEF):00004                                 fdb             _head
     552A             (              DEF):00005         _head           set             @me
5531 ECE4             (         bops.asm):00059         swap            ldd             ,s
5533 AE62             (         bops.asm):00060                                 ldx             2,s
5535 ED62             (         bops.asm):00061                                 std             2,s
5537 AFE4             (         bops.asm):00062                                 stx             ,s
                      (         bops.asm):00063                                 NEXT
5539 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         bops.asm):00064         
                      (         bops.asm):00065         ; >>> Drop the top stack entry
                      (         bops.asm):00066                                 DEF             4,"drop"
     553B             (              DEF):00001         @me                     set             *
553B 04               (              DEF):00002                                 fcb             4                                                               ;name length in bytes (MSB set = always execute)
553C 64726F70         (              DEF):00003                                 fcc             "drop"                                                          ;name
5540 552A             (              DEF):00004                                 fdb             _head
     553B             (              DEF):00005         _head           set             @me
5542 3262             (         bops.asm):00067         drop            leas    2,s
                      (         bops.asm):00068                                 NEXT
5544 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         bops.asm):00069         
                      (         bops.asm):00070         ; >>> Drop the top 2 stack entries
                      (         bops.asm):00071                                 DEF             5,"drop2"
     5546             (              DEF):00001         @me                     set             *
5546 05               (              DEF):00002                                 fcb             5                                                               ;name length in bytes (MSB set = always execute)
5547 64726F7032       (              DEF):00003                                 fcc             "drop2"                                                         ;name
554C 553B             (              DEF):00004                                 fdb             _head
     5546             (              DEF):00005         _head           set             @me
554E 3264             (         bops.asm):00072         drop2           leas    4,s
                      (         bops.asm):00073                                 NEXT
5550 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         bops.asm):00074         
                      (         bops.asm):00075         ; >>> Make a copy of the 2nd stack entry
                      (         bops.asm):00076                                 DEF             4,"over"
     5552             (              DEF):00001         @me                     set             *
5552 04               (              DEF):00002                                 fcb             4                                                               ;name length in bytes (MSB set = always execute)
5553 6F766572         (              DEF):00003                                 fcc             "over"                                                          ;name
5557 5546             (              DEF):00004                                 fdb             _head
     5552             (              DEF):00005         _head           set             @me
5559 EC62             (         bops.asm):00077         over            ldd             2,s
555B 3406             (         bops.asm):00078                                 pshs    d
                      (         bops.asm):00079                                 NEXT
555D 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         bops.asm):00080         
                      (         bops.asm):00081         ; >>> Rotate the 3rd stack entry up to the top
                      (         bops.asm):00082         ; 1 2 3 4 rot -> 1 3 4 2
                      (         bops.asm):00083                                 DEF             3,"rot"
     555F             (              DEF):00001         @me                     set             *
555F 03               (              DEF):00002                                 fcb             3                                                               ;name length in bytes (MSB set = always execute)
5560 726F74           (              DEF):00003                                 fcc             "rot"                                                           ;name
5563 5552             (              DEF):00004                                 fdb             _head
     555F             (              DEF):00005         _head           set             @me
5565 ECE4             (         bops.asm):00084         rot                     ldd             ,s
5567 AE62             (         bops.asm):00085                                 ldx             2,s
5569 ED62             (         bops.asm):00086                                 std             2,s
556B EC64             (         bops.asm):00087                                 ldd             4,s
556D AF64             (         bops.asm):00088                                 stx             4,s
556F EDE4             (         bops.asm):00089                                 std             ,s
                      (         bops.asm):00090                                 NEXT
5571 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         bops.asm):00091         
                      (         bops.asm):00092         ;@@@
                      (         bops.asm):00093         ;@@@ RETURN STACK MANIPULATION
                      (         bops.asm):00094         ;@@@
                      (         bops.asm):00095         
                      (         bops.asm):00096         ; >>> Push top of param stack to return stack
                      (         bops.asm):00097         ; CONSUMES: 0,PP = value to push
                      (         bops.asm):00098         ; PRODUCES: 0,RP = value pushed
                      (         bops.asm):00099                                 DEF             5,"rpush"
     5573             (              DEF):00001         @me                     set             *
5573 05               (              DEF):00002                                 fcb             5                                                               ;name length in bytes (MSB set = always execute)
5574 7270757368       (              DEF):00003                                 fcc             "rpush"                                                         ;name
5579 555F             (              DEF):00004                                 fdb             _head
     5573             (              DEF):00005         _head           set             @me
557B 3506             (         bops.asm):00100         rpush           puls    d                                                               ;D = top of param stack
557D 3606             (         bops.asm):00101         @push           pshu    d                                                               ;push on return stack
                      (         bops.asm):00102                                 NEXT
557F 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         bops.asm):00103         ;
                      (         bops.asm):00104         ; >>> Push a 0 on the return stack
                      (         bops.asm):00105         ; PODUCES: 0,RP = 0
5581 5F               (         bops.asm):00106         rpush0          clrb
5582 4F               (         bops.asm):00107                                 clra
5583 20F8             (         bops.asm):00108                                 bra             @push
                      (         bops.asm):00109         
                      (         bops.asm):00110         ; >>> Pop return stack to top of param stack
                      (         bops.asm):00111         ; CONSUMES: 0,RP = value to push
                      (         bops.asm):00112         ; PRODUCES: 0,PP = value pushed
                      (         bops.asm):00113                                 DEF             4,"rpop"
     5585             (              DEF):00001         @me                     set             *
5585 04               (              DEF):00002                                 fcb             4                                                               ;name length in bytes (MSB set = always execute)
5586 72706F70         (              DEF):00003                                 fcc             "rpop"                                                          ;name
558A 5573             (              DEF):00004                                 fdb             _head
     5585             (              DEF):00005         _head           set             @me
558C 3706             (         bops.asm):00114         rpop            pulu    d                                                               ;D = top of return stack
558E 3406             (         bops.asm):00115                                 pshs    d                                                               ;push on param stack
                      (         bops.asm):00116                                 NEXT
5590 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         bops.asm):00117         
                      (         bops.asm):00118         ; >>> Swap top two return stack values
                      (         bops.asm):00119                                 DEF             5,"rswap"
     5592             (              DEF):00001         @me                     set             *
5592 05               (              DEF):00002                                 fcb             5                                                               ;name length in bytes (MSB set = always execute)
5593 7273776170       (              DEF):00003                                 fcc             "rswap"                                                         ;name
5598 5585             (              DEF):00004                                 fdb             _head
     5592             (              DEF):00005         _head           set             @me
559A 3716             (         bops.asm):00120         rswap           pulu    d,x
559C 1E01             (         bops.asm):00121                                 exg             d,x
559E 3616             (         bops.asm):00122                                 pshu    d,x
                      (         bops.asm):00123                                 NEXT
55A0 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         bops.asm):00124         
                      (         bops.asm):00125         ; >>> Drop top of return stack
                      (         bops.asm):00126                                 DEF             5,"rdrop"
     55A2             (              DEF):00001         @me                     set             *
55A2 05               (              DEF):00002                                 fcb             5                                                               ;name length in bytes (MSB set = always execute)
55A3 7264726F70       (              DEF):00003                                 fcc             "rdrop"                                                         ;name
55A8 5592             (              DEF):00004                                 fdb             _head
     55A2             (              DEF):00005         _head           set             @me
55AA 3342             (         bops.asm):00127         rdrop           leau    2,u
                      (         bops.asm):00128                                 NEXT
55AC 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         bops.asm):00129         
                      (         bops.asm):00130         ;@@@
                      (         bops.asm):00131         ;@@@ MEMORY MANIPULATION
                      (         bops.asm):00132         ;@@@
                      (         bops.asm):00133         
                      (         bops.asm):00134         ; >>> Fill memory range with byte value
                      (         bops.asm):00135         ; <addr> <count> <value> mfill
                      (         bops.asm):00136                                 DEF             4,"mset"
     55AE             (              DEF):00001         @me                     set             *
55AE 04               (              DEF):00002                                 fcb             4                                                               ;name length in bytes (MSB set = always execute)
55AF 6D736574         (              DEF):00003                                 fcc             "mset"                                                          ;name
55B3 55A2             (              DEF):00004                                 fdb             _head
     55AE             (              DEF):00005         _head           set             @me
55B5 3620             (         bops.asm):00137         mset            pshu    y
55B7 3536             (         bops.asm):00138                                 puls    d,x,y                                                   ;B = value, X = count, Y = addr
55B9 8C0000           (         bops.asm):00139                                 cmpx    #0
55BC 2706             (         bops.asm):00140                                 beq             @done                                                   ;if nothing to do
                      (         bops.asm):00141         ;
55BE E7A0             (         bops.asm):00142         @lp                     stb             ,y+                                                             ;fill range with value
55C0 301F             (         bops.asm):00143                                 leax    -1,x
55C2 26FA             (         bops.asm):00144                                 bne             @lp
                      (         bops.asm):00145         ;
55C4 3720             (         bops.asm):00146         @done           pulu    y
                      (         bops.asm):00147                                 NEXT
55C6 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         bops.asm):00148         
                      (         bops.asm):00149         ; >>> Copy memory range
                      (         bops.asm):00150         ; Correctly handles overlapping source, dest ranges.
                      (         bops.asm):00151         ; <src> <count> <dest> mcpy
                      (         bops.asm):00152                                 DEF             4,"mcpy"
     55C8             (              DEF):00001         @me                     set             *
55C8 04               (              DEF):00002                                 fcb             4                                                               ;name length in bytes (MSB set = always execute)
55C9 6D637079         (              DEF):00003                                 fcc             "mcpy"                                                          ;name
55CD 55AE             (              DEF):00004                                 fdb             _head
     55C8             (              DEF):00005         _head           set             @me
55CF 3620             (         bops.asm):00153         mcpy            pshu    y
55D1 3520             (         bops.asm):00154                                 puls    y                                                               ;Y = dest addr
55D3 3516             (         bops.asm):00155                                 puls    d,x                                                             ;X = source, D = count
55D5 3440             (         bops.asm):00156                                 pshs    u
55D7 8D06             (         bops.asm):00157                                 bsr             mcpy_                                                   ;do the copy
55D9 3540             (         bops.asm):00158                                 puls    u
55DB 3720             (         bops.asm):00159                                 pulu    y
                      (         bops.asm):00160                                 NEXT
55DD 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         bops.asm):00161         
                      (         bops.asm):00162         ; >>> Subroutine to copy memory range
                      (         bops.asm):00163         ; Correctly handles overlapping source, dest ranges.
                      (         bops.asm):00164         ; PASSED:  X = source addr, Y = dest, D = count
55DF 3420             (         bops.asm):00165         mcpy_           pshs    y
55E1 ACE1             (         bops.asm):00166                                 cmpx    ,s++                                                    ;source < dest?
55E3 2518             (         bops.asm):00167                                 blo             @dsc                                                    ;yep, have to copy descending
                      (         bops.asm):00168         ;
55E5 44               (         bops.asm):00169                                 lsra                                                                    ;convert byte count to word
55E6 56               (         bops.asm):00170                                 rorb
55E7 1F03             (         bops.asm):00171                                 tfr             d,u                                                             ;U = vword count
55E9 2404             (         bops.asm):00172                                 bcc             @asclp                                                  ;if count was even
55EB A680             (         bops.asm):00173                                 lda             ,x+                                                             ;else copy odd byte
55ED EDA0             (         bops.asm):00174                                 std             ,y+
                      (         bops.asm):00175         ;
55EF 11830000         (         bops.asm):00176         @asclp          cmpu    #0
55F3 2724             (         bops.asm):00177                                 beq             @done                                                   ;if all done
55F5 EC81             (         bops.asm):00178                                 ldd             ,x++                                                    ;else copy a word
55F7 EDA1             (         bops.asm):00179                                 std             ,y++
55F9 335F             (         bops.asm):00180                                 leau    -1,u
55FB 20F2             (         bops.asm):00181                                 bra             @asclp
                      (         bops.asm):00182         ;
55FD 308B             (         bops.asm):00183         @dsc            leax    d,x                                                             ;copy descending addresses
55FF 31AB             (         bops.asm):00184                                 leay    d,y
                      (         bops.asm):00185         ;
5601 44               (         bops.asm):00186                                 lsra                                                                    ;convert byte count to word
5602 56               (         bops.asm):00187                                 rorb
5603 1F03             (         bops.asm):00188                                 tfr             d,u                                                             ;U = word count
5605 2404             (         bops.asm):00189                                 bcc             @dsclp                                                  ;if byte count was even
5607 A682             (         bops.asm):00190                                 lda             ,-x                                                             ;else copy odd byte
5609 A7A2             (         bops.asm):00191                                 sta             ,-y
                      (         bops.asm):00192         ;
560B 11830000         (         bops.asm):00193         @dsclp          cmpu    #0
560F 2708             (         bops.asm):00194                                 beq             @done                                                   ;if all done
5611 EC83             (         bops.asm):00195                                 ldd             ,--x                                                    ;copy a word
5613 EDA3             (         bops.asm):00196                                 std             ,--y
5615 335F             (         bops.asm):00197                                 leau    -1,u
5617 20F2             (         bops.asm):00198                                 bra             @dsclp
                      (         bops.asm):00199         ;
5619 39               (         bops.asm):00200         @done           rts
                      (    ./src/alf.asm):00075                                 include "cops.asm"
                      (         cops.asm):00001         ; "cops.asm" - control operations for Alf
                      (         cops.asm):00002         ; NOTE: Control structures can only be used in compiled words, not in execute mode.
                      (         cops.asm):00003         ; They typically use the Return Stack both during compilation and sometimes during
                      (         cops.asm):00004         ; execution to hold control data such as jump addresses. Mucking with the RS while
                      (         cops.asm):00005         ; in a control structure is a recipe for disaster.
                      (         cops.asm):00006         ; 2022-nov-18 dww  created
                      (         cops.asm):00007         
                      (         cops.asm):00008         ;@@@
                      (         cops.asm):00009         ;@@@ BASIC CONTROL WORDS
                      (         cops.asm):00010         ;@@@
                      (         cops.asm):00011         
                      (         cops.asm):00012         ; >>> Unconditional jump
                      (         cops.asm):00013                                 DEF             3,"jp$"
     561A             (              DEF):00001         @me                     set             *
561A 03               (              DEF):00002                                 fcb             3                                                               ;name length in bytes (MSB set = always execute)
561B 6A7024           (              DEF):00003                                 fcc             "jp$"                                                           ;name
561E 55C8             (              DEF):00004                                 fdb             _head
     561A             (              DEF):00005         _head           set             @me
5620 10AEA4           (         cops.asm):00014         jp$                     ldy             ,y
                      (         cops.asm):00015                                 NEXT
5623 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         cops.asm):00016         
                      (         cops.asm):00017         ; >>> Jump if false (top of stack == 0)
                      (         cops.asm):00018         ; CONSUMES: 0,PP = condition
                      (         cops.asm):00019                                 DEF             3,"jf$"
     5625             (              DEF):00001         @me                     set             *
5625 03               (              DEF):00002                                 fcb             3                                                               ;name length in bytes (MSB set = always execute)
5626 6A6624           (              DEF):00003                                 fcc             "jf$"                                                           ;name
5629 561A             (              DEF):00004                                 fdb             _head
     5625             (              DEF):00005         _head           set             @me
562B ECE1             (         cops.asm):00020         jf$                     ldd             ,s++
562D 27F1             (         cops.asm):00021                                 beq             jp$                                                             ;if false
562F 3122             (         cops.asm):00022         @skip           leay    2,y                                                             ;else skip addr
                      (         cops.asm):00023                                 NEXT
5631 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         cops.asm):00024         ;
                      (         cops.asm):00025         ; >>> Jump if true (top of stack != 0)
                      (         cops.asm):00026         ; CONSUMES: 0,PP = condition
                      (         cops.asm):00027                                 DEF             3,"jt$"
     5633             (              DEF):00001         @me                     set             *
5633 03               (              DEF):00002                                 fcb             3                                                               ;name length in bytes (MSB set = always execute)
5634 6A7424           (              DEF):00003                                 fcc             "jt$"                                                           ;name
5637 5625             (              DEF):00004                                 fdb             _head
     5633             (              DEF):00005         _head           set             @me
5639 ECE1             (         cops.asm):00028         jt$                     ldd             ,s++
563B 26E3             (         cops.asm):00029                                 bne             jp$                                                             ;if true
563D 20F0             (         cops.asm):00030                                 bra             @skip
                      (         cops.asm):00031         
                      (         cops.asm):00032         ;@@@
                      (         cops.asm):00033         ;@@@ IF STATEMENTS
                      (         cops.asm):00034         ;@@@ <expr> if <words> then
                      (         cops.asm):00035         ;@@@ <expr> if <words> else <words> then
                      (         cops.asm):00036         ;@@@ opt <expr> do <words> or <expr> do <words> else <words> then
                      (         cops.asm):00037         ;@@@ While compiling: RP+0 = prev jump false operand, RP+2 = chain to end of statement
                      (         cops.asm):00038         ;@@@
                      (         cops.asm):00039         
                      (         cops.asm):00040         ; >>> 'if' statement (compile only)
                      (         cops.asm):00041         ; PRODUCES: 0,RP = head of end of statement chain = 0; 2,RP = jf$ operand addr
                      (         cops.asm):00042         ; NOTE: if/else/then doesn't really need both but we maintain them so else/then
                      (         cops.asm):00043         ; will word for opt statements.
                      (         cops.asm):00044                                 DEF             _EXE+2,"if"
     563F             (              DEF):00001         @me                     set             *
563F 82               (              DEF):00002                                 fcb             _EXE+2                                                          ;name length in bytes (MSB set = always execute)
5640 6966             (              DEF):00003                                 fcc             "if"                                                            ;name
5642 5633             (              DEF):00004                                 fdb             _head
     563F             (              DEF):00005         _head           set             @me
                      (         cops.asm):00045                                 WORDS
5644 9D06             (            WORDS):00001                                 jsr             <words$
5646 5315558C         (         cops.asm):00046                                 fdb             comp_only,rpop                                  ;bail if not compiling, save rtn addr
564A 5BEE562B         (         cops.asm):00047                                 fdb             complw,jf$                                              ;compile jump to false code
564E 5B16557B5BEE0000 (         cops.asm):00048                                 fdb             dp,rpush,complw,0                               ;2,PP = addr of jf$ operand for later
5656 5581             (         cops.asm):00049                                 fdb             rpush0                                                  ;0,RP = 0 = head of end of statement chain
5658 557B             (         cops.asm):00050                                 fdb             rpush                                                   ;restore rtn addr
                      (         cops.asm):00051                                 DONE
565A 500D             (             DONE):00001                                 fdb             done$
                      (         cops.asm):00052         
                      (         cops.asm):00053         ; >>> 'else' part of 'if' statement
                      (         cops.asm):00054         ; CONSUMES: 0,RP = head of end of statement chain; 2,RP = prev jf$ operand addr
                      (         cops.asm):00055         ; PRODUCES: 0,RP = head of end of statement chain; 2,RP = 0
                      (         cops.asm):00056                                 DEF             _EXE+4,"else"
     565C             (              DEF):00001         @me                     set             *
565C 84               (              DEF):00002                                 fcb             _EXE+4                                                          ;name length in bytes (MSB set = always execute)
565D 656C7365         (              DEF):00003                                 fcc             "else"                                                          ;name
5661 563F             (              DEF):00004                                 fdb             _head
     565C             (              DEF):00005         _head           set             @me
                      (         cops.asm):00057                                 WORDS
5663 9D06             (            WORDS):00001                                 jsr             <words$
5665 5315558C         (         cops.asm):00058                                 fdb             comp_only,rpop                                  ;bail if not compiling, save rtn addr
5669 5BEE56205B16558C (         cops.asm):00059                                 fdb             complw,jp$,dp,rpop,compw                ;compile jump to end of statement
     5BDB
5673 5770             (         cops.asm):00060                                 fdb             dp$chain                                                ;fill in jf$ operand to here
5675 557B5581         (         cops.asm):00061                                 fdb             rpush,rpush0                                    ;2,RP = end chain; 0,RP = no jf$ operand
5679 557B             (         cops.asm):00062                                 fdb             rpush                                                   ;restore return addr
                      (         cops.asm):00063                                 DONE
567B 500D             (             DONE):00001                                 fdb             done$
                      (         cops.asm):00064         
                      (         cops.asm):00065         ; >>> 'then' part of 'if' statement
                      (         cops.asm):00066         ; CONSUMES: 0,RP = head of end of statement chain; 2,RP = prev jf$ operand addr
                      (         cops.asm):00067                                 DEF             _EXE+4,"then"
     567D             (              DEF):00001         @me                     set             *
567D 84               (              DEF):00002                                 fcb             _EXE+4                                                          ;name length in bytes (MSB set = always execute)
567E 7468656E         (              DEF):00003                                 fcc             "then"                                                          ;name
5682 565C             (              DEF):00004                                 fdb             _head
     567D             (              DEF):00005         _head           set             @me
                      (         cops.asm):00068                                 WORDS
5684 9D06             (            WORDS):00001                                 jsr             <words$
5686 5315558C         (         cops.asm):00069                                 fdb             comp_only,rpop                                  ;bail if not compiling, save rtn addr
568A 57705770         (         cops.asm):00070                                 fdb             dp$chain,dp$chain                               ;fill in end chain, prev jump operand
568E 557B             (         cops.asm):00071                                 fdb             rpush
                      (         cops.asm):00072                                 DONE
5690 500D             (             DONE):00001                                 fdb             done$
                      (         cops.asm):00073         
                      (         cops.asm):00074         ; >>> 'opt' start of multi-way if statement
                      (         cops.asm):00075         ; PRODUCES: 0,RP = head of end statement chain = 0; 2,RP = jf$ operand addr = 0
                      (         cops.asm):00076                                 DEF             _EXE+3,"opt"
     5692             (              DEF):00001         @me                     set             *
5692 83               (              DEF):00002                                 fcb             _EXE+3                                                          ;name length in bytes (MSB set = always execute)
5693 6F7074           (              DEF):00003                                 fcc             "opt"                                                           ;name
5696 567D             (              DEF):00004                                 fdb             _head
     5692             (              DEF):00005         _head           set             @me
                      (         cops.asm):00077                                 WORDS
5698 9D06             (            WORDS):00001                                 jsr             <words$
569A 5315558C         (         cops.asm):00078                                 fdb             comp_only,rpop                                  ;bail if not compiling, save rtn addr
569E 55815581         (         cops.asm):00079                                 fdb             rpush0,rpush0                                   ;no prev jump, end statement chains yet
56A2 557B             (         cops.asm):00080                                 fdb             rpush
                      (         cops.asm):00081                                 DONE
56A4 500D             (             DONE):00001                                 fdb             done$
                      (         cops.asm):00082         
                      (         cops.asm):00083         ; >>> 'do' part of multi-way if statement
                      (         cops.asm):00084         ; PRODUCES: 0,RP = unchanged, 2,RP = addr of jf$ operand
                      (         cops.asm):00085                                 DEF             _EXE+2,"do"
     56A6             (              DEF):00001         @me                     set             *
56A6 82               (              DEF):00002                                 fcb             _EXE+2                                                          ;name length in bytes (MSB set = always execute)
56A7 646F             (              DEF):00003                                 fcc             "do"                                                            ;name
56A9 5692             (              DEF):00004                                 fdb             _head
     56A6             (              DEF):00005         _head           set             @me
                      (         cops.asm):00086                                 WORDS
56AB 9D06             (            WORDS):00001                                 jsr             <words$
56AD 5315558C         (         cops.asm):00087                                 fdb             comp_only,rpop                                  ;bail if not compiling, save rtn addr
56B1 5BEE562B5B16513E (         cops.asm):00088                                 fdb             complw,jf$,dp,push0,compw               ;compile jump if false to next 'do'
     5BDB
56BB 559A55AA557B559A (         cops.asm):00089                                 fdb             rswap,rdrop,rpush,rswap                 ;replace prev jf$ addr with ours
56C3 557B             (         cops.asm):00090                                 fdb             rpush
                      (         cops.asm):00091                                 DONE
56C5 500D             (             DONE):00001                                 fdb             done$
                      (         cops.asm):00092         
                      (         cops.asm):00093         ; >>> 'or' part of multi-way if statement
                      (         cops.asm):00094         ; CONSUMES: 2,RP = backfills prev jf$ to here if needed
                      (         cops.asm):00095         ; PRODUCES: 0,RP = added a jp$ addr to end chain, 2,RP = 0
                      (         cops.asm):00096                                 DEF             _EXE+2,"or"
     56C7             (              DEF):00001         @me                     set             *
56C7 82               (              DEF):00002                                 fcb             _EXE+2                                                          ;name length in bytes (MSB set = always execute)
56C8 6F72             (              DEF):00003                                 fcc             "or"                                                            ;name
56CA 56A6             (              DEF):00004                                 fdb             _head
     56C7             (              DEF):00005         _head           set             @me
                      (         cops.asm):00097                                 WORDS
56CC 9D06             (            WORDS):00001                                 jsr             <words$
56CE 5315558C         (         cops.asm):00098                                 fdb             comp_only,rpop                                  ;bail if not compiling, save rtn addr
56D2 5BEE56205B16558C (         cops.asm):00099                                 fdb             complw,jp$,dp,rpop,compw                ;compile jump to end
     5BDB
56DC 57705581557B     (         cops.asm):00100                                 fdb             dp$chain,rpush0,rpush                   ;fill in prev jf$ to here, clear it
56E2 557B             (         cops.asm):00101                                 fdb             rpush
                      (         cops.asm):00102                                 DONE
56E4 500D             (             DONE):00001                                 fdb             done$
                      (         cops.asm):00103         
                      (         cops.asm):00104         ;@@@
                      (         cops.asm):00105         ;@@@ LOOP STATEMENTS
                      (         cops.asm):00106         ;@@@ loop {<expr> while} <words> {<expr> stopif} <words> (again | <expr> until)
                      (         cops.asm):00107         ;@@@ <count> times <words> {<expr> stopif} <words> ( next | <expr> +next )
                      (         cops.asm):00108         ;@@@ <from> <to> for <words> {<expr> stopif} <words> ( next | <expr> +next )
                      (         cops.asm):00109         ;@@@
                      (         cops.asm):00110         
                      (         cops.asm):00111         ; >>> Start of a loop
                      (         cops.asm):00112                                 DEF             _EXE+4,"loop"
     56E6             (              DEF):00001         @me                     set             *
56E6 84               (              DEF):00002                                 fcb             _EXE+4                                                          ;name length in bytes (MSB set = always execute)
56E7 6C6F6F70         (              DEF):00003                                 fcc             "loop"                                                          ;name
56EB 56C7             (              DEF):00004                                 fdb             _head
     56E6             (              DEF):00005         _head           set             @me
                      (         cops.asm):00113                                 WORDS
56ED 9D06             (            WORDS):00001                                 jsr             <words$
56EF 5315             (         cops.asm):00114                                 fdb             comp_only                                               ;bail if not compiling
56F1 558C             (         cops.asm):00115                                 fdb             rpop
56F3 55815B16557B     (         cops.asm):00116                                 fdb             rpush0,dp,rpush                                 ;2,RP = end of loop chain (0), 0,RP = top of loop
56F9 557B             (         cops.asm):00117                                 fdb             rpush
                      (         cops.asm):00118                                 DONE
56FB 500D             (             DONE):00001                                 fdb             done$
                      (         cops.asm):00119         
                      (         cops.asm):00120         ; >>> Conditional start of loop
                      (         cops.asm):00121                                 DEF             _EXE+5,"while"
     56FD             (              DEF):00001         @me                     set             *
56FD 85               (              DEF):00002                                 fcb             _EXE+5                                                          ;name length in bytes (MSB set = always execute)
56FE 7768696C65       (              DEF):00003                                 fcc             "while"                                                         ;name
5703 56E6             (              DEF):00004                                 fdb             _head
     56FD             (              DEF):00005         _head           set             @me
                      (         cops.asm):00122                                 WORDS
5705 9D06             (            WORDS):00001                                 jsr             <words$
5707 558C558C         (         cops.asm):00123                                 fdb             rpop,rpop                                               ;save return, top of loop
570B 5BF2562B         (         cops.asm):00124                                 fdb             pushlw,jf$                                              ;compiling jump if false to end of loop
570F 5315             (         cops.asm):00125         @while          fdb             comp_only                                               ;bail if not compiling
5711 5BDB5B16558C5BDB (         cops.asm):00126                                 fdb             compw,dp,rpop,compw,rpush               ;compile jump, add operand addr to chain
     557B
571B 557B557B         (         cops.asm):00127                                 fdb             rpush,rpush                                             ;restore return, top of loop
                      (         cops.asm):00128                                 DONE
571F 500D             (             DONE):00001                                 fdb             done$
                      (         cops.asm):00129         ;
                      (         cops.asm):00130         ; >>> Conditional stop loop
                      (         cops.asm):00131                                 DEF             _EXE+6,"stopif"
     5721             (              DEF):00001         @me                     set             *
5721 86               (              DEF):00002                                 fcb             _EXE+6                                                          ;name length in bytes (MSB set = always execute)
5722 73746F706966     (              DEF):00003                                 fcc             "stopif"                                                                ;name
5728 56FD             (              DEF):00004                                 fdb             _head
     5721             (              DEF):00005         _head           set             @me
                      (         cops.asm):00132                                 WORDS
572A 9D06             (            WORDS):00001                                 jsr             <words$
572C 558C558C         (         cops.asm):00133                                 fdb             rpop,rpop                                               ;save return, top of loop
5730 5BF25639         (         cops.asm):00134                                 fdb             pushlw,jt$                                              ;compiling jump if true to end of loop
5734 5620570F         (         cops.asm):00135                                 fdb             jp$,@while                                              ;finish same as while
                      (         cops.asm):00136         
                      (         cops.asm):00137         ; >>> Unconditional end of loop
                      (         cops.asm):00138                                 DEF             _EXE+5,"again"
     5738             (              DEF):00001         @me                     set             *
5738 85               (              DEF):00002                                 fcb             _EXE+5                                                          ;name length in bytes (MSB set = always execute)
5739 616761696E       (              DEF):00003                                 fcc             "again"                                                         ;name
573E 5721             (              DEF):00004                                 fdb             _head
     5738             (              DEF):00005         _head           set             @me
                      (         cops.asm):00139                                 WORDS
5740 9D06             (            WORDS):00001                                 jsr             <words$
5742 5315             (         cops.asm):00140                                 fdb             comp_only                                               ;bail if not compiling
5744 558C             (         cops.asm):00141                                 fdb             rpop
5746 5BEE5620558C5BDB (         cops.asm):00142                                 fdb             complw,jp$,rpop,compw                   ;compile jump back to top
574E 5770             (         cops.asm):00143                                 fdb             dp$chain                                                ;backfill end of loop refs
5750 557B             (         cops.asm):00144                                 fdb             rpush
                      (         cops.asm):00145                                 DONE
5752 500D             (             DONE):00001                                 fdb             done$
                      (         cops.asm):00146         
                      (         cops.asm):00147         ; >>> Conditional end of loop
                      (         cops.asm):00148                                 DEF             _EXE+5,"until"
     5754             (              DEF):00001         @me                     set             *
5754 85               (              DEF):00002                                 fcb             _EXE+5                                                          ;name length in bytes (MSB set = always execute)
5755 756E74696C       (              DEF):00003                                 fcc             "until"                                                         ;name
575A 5738             (              DEF):00004                                 fdb             _head
     5754             (              DEF):00005         _head           set             @me
                      (         cops.asm):00149                                 WORDS
575C 9D06             (            WORDS):00001                                 jsr             <words$
575E 5315             (         cops.asm):00150                                 fdb             comp_only                                               ;bail if not compiling
5760 558C             (         cops.asm):00151                                 fdb             rpop
5762 5BEE562B558C5BDB (         cops.asm):00152                                 fdb             complw,jf$,rpop,compw                   ;compile jump if false back to top
576A 5770             (         cops.asm):00153                                 fdb             dp$chain                                                ;backfill end of loop refs
576C 557B             (         cops.asm):00154                                 fdb             rpush
                      (         cops.asm):00155                                 DONE
576E 500D             (             DONE):00001                                 fdb             done$
                      (         cops.asm):00156         
                      (         cops.asm):00157         ; >>> Fill in backward chain of refs to current DP
                      (         cops.asm):00158         ; CONSUMES: 0,RP = 0 or addr of last link in chain
5770 FC0002           (         cops.asm):00159         dp$chain        ldd             dp$                                                             ;D = value to fill with
5773 3710             (         cops.asm):00160                                 pulu    x                                                               ;X = head of chain
5775 3420             (         cops.asm):00161                                 pshs    y                                                               ;preserve IP
                      (         cops.asm):00162         ;
5777 8C0000           (         cops.asm):00163         @lp                     cmpx    #0
577A 2709             (         cops.asm):00164                                 beq             @next                                                   ;if hit end of chain
577C 10AE84           (         cops.asm):00165                                 ldy             ,x                                                              ;next link in chain
577F ED84             (         cops.asm):00166                                 std             ,x                                                              ;fill in value
5781 1F21             (         cops.asm):00167                                 tfr             y,x                                                             ;follow the chain
5783 20F2             (         cops.asm):00168                                 bra             @lp
                      (         cops.asm):00169         ;
5785 3520             (         cops.asm):00170         @next           puls    y
                      (         cops.asm):00171                                 NEXT
5787 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         cops.asm):00172         
                      (         cops.asm):00173         ; >>> Loop N times
                      (         cops.asm):00174         ; CONSUMES: 0,PP = number of times to repeat loop
                      (         cops.asm):00175                                 DEF             _EXE+5,"times"
     5789             (              DEF):00001         @me                     set             *
5789 85               (              DEF):00002                                 fcb             _EXE+5                                                          ;name length in bytes (MSB set = always execute)
578A 74696D6573       (              DEF):00003                                 fcc             "times"                                                         ;name
578F 5754             (              DEF):00004                                 fdb             _head
     5789             (              DEF):00005         _head           set             @me
                      (         cops.asm):00176                                 WORDS
5791 9D06             (            WORDS):00001                                 jsr             <words$
5793 5BEE58EF5BEE557B (         cops.asm):00177                                 fdb             complw,sub1,complw,rpush                ;runtine: push count - 1 to RP
579B 5BEE5581         (         cops.asm):00178                                 fdb             complw,rpush0                                   ;runtime: push 0 to RP
579F 562057B3         (         cops.asm):00179                                 fdb             jp$,for$                                                ;continue same as 'for'
                      (         cops.asm):00180         ;
                      (         cops.asm):00181         ; >>> Loop from start to end value
                      (         cops.asm):00182         ; NOTE: Assumes values are signed
                      (         cops.asm):00183                                 DEF             _EXE+3,"for"
     57A3             (              DEF):00001         @me                     set             *
57A3 83               (              DEF):00002                                 fcb             _EXE+3                                                          ;name length in bytes (MSB set = always execute)
57A4 666F72           (              DEF):00003                                 fcc             "for"                                                           ;name
57A7 5789             (              DEF):00004                                 fdb             _head
     57A3             (              DEF):00005         _head           set             @me
                      (         cops.asm):00184                                 WORDS
57A9 9D06             (            WORDS):00001                                 jsr             <words$
57AB 5BEE557B5BEE557B (         cops.asm):00185                                 fdb             complw,rpush,complw,rpush               ;runtime: 0,RP = lower, 2,RP = upper
57B3 5315             (         cops.asm):00186         for$            fdb             comp_only                                               ;bail if not compiling
57B5 558C             (         cops.asm):00187                                 fdb             rpop
57B7 5B16             (         cops.asm):00188                                 fdb             dp                                                              ;remember top of loop
57B9 5BEE57CB         (         cops.asm):00189                                 fdb             complw,for$_                                    ;runtime: compares limits and jumps
57BD 5B16513E5BDB     (         cops.asm):00190                                 fdb             dp,push0,compw                                  ;fill in loop end later
57C3 557B557B         (         cops.asm):00191                                 fdb             rpush,rpush                                             ;0,RP = top of loop, 2,RP = chain for end
57C7 557B             (         cops.asm):00192                                 fdb             rpush
                      (         cops.asm):00193                                 DONE
57C9 500D             (             DONE):00001                                 fdb             done$
                      (         cops.asm):00194         
                      (         cops.asm):00195         ; >>> Runtime top of for loop: compare limits and jump if done
57CB ECC4             (         cops.asm):00196         for$_           ldd             ,u                                                              ;U = loop var value
57CD 10A342           (         cops.asm):00197                                 cmpd    2,u
57D0 2E04             (         cops.asm):00198                                 bgt             @done                                                   ;if time to end loop
57D2 3122             (         cops.asm):00199                                 leay    2,y                                                             ;else skip end address
                      (         cops.asm):00200                                 NEXT                                                                    ;and continue
57D4 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         cops.asm):00201         ;
57D6 10AEA4           (         cops.asm):00202         @done           ldy             ,y                                                              ;jump to end of loop
                      (         cops.asm):00203                                 NEXT
57D9 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         cops.asm):00204         
                      (         cops.asm):00205         ; >>> Next 'for' iteration (increment by 1)
                      (         cops.asm):00206                                 DEF             _EXE+4,"next"
     57DB             (              DEF):00001         @me                     set             *
57DB 84               (              DEF):00002                                 fcb             _EXE+4                                                          ;name length in bytes (MSB set = always execute)
57DC 6E657874         (              DEF):00003                                 fcc             "next"                                                          ;name
57E0 57A3             (              DEF):00004                                 fdb             _head
     57DB             (              DEF):00005         _head           set             @me
                      (         cops.asm):00207                                 WORDS
57E2 9D06             (            WORDS):00001                                 jsr             <words$
57E4 5BEE5814         (         cops.asm):00208                                 fdb             complw,next$1_                                  ;compile increment by 1 word
57E8 562057FA         (         cops.asm):00209                                 fdb             jp$,@next                                               ;rest same as 'next+'
                      (         cops.asm):00210         ;
                      (         cops.asm):00211         ; >>> Next 'for' iteration, arbitrary increment
                      (         cops.asm):00212                                 DEF             _EXE+5,"+next"
     57EC             (              DEF):00001         @me                     set             *
57EC 85               (              DEF):00002                                 fcb             _EXE+5                                                          ;name length in bytes (MSB set = always execute)
57ED 2B6E657874       (              DEF):00003                                 fcc             "+next"                                                         ;name
57F2 57DB             (              DEF):00004                                 fdb             _head
     57EC             (              DEF):00005         _head           set             @me
                      (         cops.asm):00213                                 WORDS
57F4 9D06             (            WORDS):00001                                 jsr             <words$
57F6 5BEE5810         (         cops.asm):00214                                 fdb             complw,next$_                                   ;compile increment by N word
57FA 5315             (         cops.asm):00215         @next           fdb             comp_only                                               ;bail if not compiling
57FC 558C             (         cops.asm):00216                                 fdb             rpop
57FE 558C5BDB         (         cops.asm):00217                                 fdb             rpop,compw                                              ;target addr is top of loop
5802 5770             (         cops.asm):00218                                 fdb             dp$chain                                                ;backfill end of loop to here
5804 5BEE55AA5BEE55AA (         cops.asm):00219                                 fdb             complw,rdrop,complw,rdrop               ;runtime: drop loop limits
580C 557B             (         cops.asm):00220                                 fdb             rpush
                      (         cops.asm):00221                                 DONE
580E 500D             (             DONE):00001                                 fdb             done$
                      (         cops.asm):00222         
                      (         cops.asm):00223         ; >>> Runtime next 'for' loop iteration
                      (         cops.asm):00224         ; Increments limit and jumps back to the top
5810 3506             (         cops.asm):00225         next$_          puls    d                                                               ;D = increment
5812 2003             (         cops.asm):00226                                 bra             @next
5814 CC0001           (         cops.asm):00227         next$1_         ldd             #1                                                              ;D = default increment
5817 E3C4             (         cops.asm):00228         @next           addd    ,u                                                              ;add to 0,RP = loop var
5819 EDC4             (         cops.asm):00229                                 std             ,u
581B 10AEA4           (         cops.asm):00230                                 ldy             ,y                                                              ;jump to top of loop
                      (         cops.asm):00231                                 NEXT
581E 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         cops.asm):00232         
                      (         cops.asm):00233         ; >>> Push innermost 'for' loop's current var
                      (         cops.asm):00234         ; PRODUCES: 0,PP = loop value
                      (         cops.asm):00235                                 DEF             1,"i"
     5820             (              DEF):00001         @me                     set             *
5820 01               (              DEF):00002                                 fcb             1                                                               ;name length in bytes (MSB set = always execute)
5821 69               (              DEF):00003                                 fcc             "i"                                                             ;name
5822 57EC             (              DEF):00004                                 fdb             _head
     5820             (              DEF):00005         _head           set             @me
5824 ECC4             (         cops.asm):00236                                 ldd             ,u                                                              ;D = innermost loop value
5826 3406             (         cops.asm):00237         @push           pshs    d
                      (         cops.asm):00238                                 NEXT
5828 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         cops.asm):00239         ;
                      (         cops.asm):00240         ; Push innermost loop's maximum value
                      (         cops.asm):00241         ; PRODUCES: 0,PP = loop max value
                      (         cops.asm):00242                                 DEF             4,"imax"
     582A             (              DEF):00001         @me                     set             *
582A 04               (              DEF):00002                                 fcb             4                                                               ;name length in bytes (MSB set = always execute)
582B 696D6178         (              DEF):00003                                 fcc             "imax"                                                          ;name
582F 5820             (              DEF):00004                                 fdb             _head
     582A             (              DEF):00005         _head           set             @me
5831 EC42             (         cops.asm):00243                                 ldd             2,u                                                             ;D = innermost loop max value
5833 20F1             (         cops.asm):00244                                 bra             @push
                      (         cops.asm):00245         ;
                      (         cops.asm):00246         ; >>> Push 2nd innermost 'for' loop's current var
                      (         cops.asm):00247         ; PRODUCES: 0,PP = loop value
                      (         cops.asm):00248                                 DEF             1,"j"
     5835             (              DEF):00001         @me                     set             *
5835 01               (              DEF):00002                                 fcb             1                                                               ;name length in bytes (MSB set = always execute)
5836 6A               (              DEF):00003                                 fcc             "j"                                                             ;name
5837 582A             (              DEF):00004                                 fdb             _head
     5835             (              DEF):00005         _head           set             @me
5839 EC44             (         cops.asm):00249                                 ldd             4,u                                                             ;D = 2nd innermost loop value
583B 20E9             (         cops.asm):00250                                 bra             @push
                      (         cops.asm):00251         ;
                      (         cops.asm):00252         ; Push 2nd innermost loop's maximum value
                      (         cops.asm):00253         ; PRODUCES: 0,PP = loop max value
                      (         cops.asm):00254                                 DEF             4,"jmax"
     583D             (              DEF):00001         @me                     set             *
583D 04               (              DEF):00002                                 fcb             4                                                               ;name length in bytes (MSB set = always execute)
583E 6A6D6178         (              DEF):00003                                 fcc             "jmax"                                                          ;name
5842 5835             (              DEF):00004                                 fdb             _head
     583D             (              DEF):00005         _head           set             @me
5844 EC46             (         cops.asm):00255                                 ldd             6,u                                                             ;D = 2nd innermost loop max value
5846 20DE             (         cops.asm):00256                                 bra             @push
                      (         cops.asm):00257         ;
                      (         cops.asm):00258         ; >>> Push 3rd innermost 'for' loop's current var
                      (         cops.asm):00259         ; PRODUCES: 0,PP = loop value
                      (         cops.asm):00260                                 DEF             1,"k"
     5848             (              DEF):00001         @me                     set             *
5848 01               (              DEF):00002                                 fcb             1                                                               ;name length in bytes (MSB set = always execute)
5849 6B               (              DEF):00003                                 fcc             "k"                                                             ;name
584A 583D             (              DEF):00004                                 fdb             _head
     5848             (              DEF):00005         _head           set             @me
584C EC48             (         cops.asm):00261                                 ldd             8,u                                                             ;D = 3rd innermost loop value
584E 3406             (         cops.asm):00262                                 pshs    d
                      (         cops.asm):00263                                 NEXT
5850 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         cops.asm):00264         ;
                      (         cops.asm):00265         ; Push 3rd innermost loop's maximum value
                      (         cops.asm):00266         ; PRODUCES: 0,PP = loop max value
                      (         cops.asm):00267                                 DEF             4,"kmax"
     5852             (              DEF):00001         @me                     set             *
5852 04               (              DEF):00002                                 fcb             4                                                               ;name length in bytes (MSB set = always execute)
5853 6B6D6178         (              DEF):00003                                 fcc             "kmax"                                                          ;name
5857 5848             (              DEF):00004                                 fdb             _head
     5852             (              DEF):00005         _head           set             @me
5859 EC4A             (         cops.asm):00268                                 ldd             10,u                                                    ;D = 3rd innermost loop max value
585B 20C9             (         cops.asm):00269                                 bra             @push
                      (    ./src/alf.asm):00076                                 include "expr.asm"
                      (         expr.asm):00001         ; "expr.asm" - numeric expression words for the Alf nucleus
                      (         expr.asm):00002         ; 2022-nov-18 dww  created
                      (         expr.asm):00003         
                      (         expr.asm):00004         ;@@@
                      (         expr.asm):00005         ;@@@ NUMERIC PRINTING
                      (         expr.asm):00006         ;@@@
                      (         expr.asm):00007         
                      (         expr.asm):00008         ; >>> Print (display) signed decimal
                      (         expr.asm):00009         ; CONSUMES: 0,PP = signed number
                      (         expr.asm):00010                                 DEF             2,"pr"
     585D             (              DEF):00001         @me                     set             *
585D 02               (              DEF):00002                                 fcb             2                                                               ;name length in bytes (MSB set = always execute)
585E 7072             (              DEF):00003                                 fcc             "pr"                                                            ;name
5860 5852             (              DEF):00004                                 fdb             _head
     585D             (              DEF):00005         _head           set             @me
5862 3506             (         expr.asm):00011                                 puls    d                                                       ;D = number
5864 8D02             (         expr.asm):00012                                 bsr             prsign_                                         ;display sign if necessary
5866 2018             (         expr.asm):00013                                 bra             @pru                                            ;display unsigned
                      (         expr.asm):00014         ;
5868 4D               (         expr.asm):00015         prsign_         tsta
5869 2A0C             (         expr.asm):00016                                 bpl             @ret                                            ;if it's a positive number
586B 3406             (         expr.asm):00017                                 pshs    d
586D C62D             (         expr.asm):00018                                 ldb             #'-'                                            ;else display sign
586F BD545C           (         expr.asm):00019                                 jsr             prc_
5872 3506             (         expr.asm):00020                                 puls    d
5874 BD5972           (         expr.asm):00021                                 jsr             neg16_                                          ;convert to positive
5877 39               (         expr.asm):00022         @ret            rts
                      (         expr.asm):00023         ;
                      (         expr.asm):00024         ; >>> Print (display) unsigned decimal
                      (         expr.asm):00025         ; CONSUMES: 0,PP = unsigned number
                      (         expr.asm):00026                                 DEF             3,"pru"
     5878             (              DEF):00001         @me                     set             *
5878 03               (              DEF):00002                                 fcb             3                                                               ;name length in bytes (MSB set = always execute)
5879 707275           (              DEF):00003                                 fcc             "pru"                                                           ;name
587C 585D             (              DEF):00004                                 fdb             _head
     5878             (              DEF):00005         _head           set             @me
587E 3506             (         expr.asm):00027                                 puls    d                                                       ;D = unsigned number
5880 8E000A           (         expr.asm):00028         @pru            ldx             #10                                                     ;display in base 10
5883 8D02             (         expr.asm):00029                                 bsr             prnum_
                      (         expr.asm):00030                                 NEXT
5885 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         expr.asm):00031         
                      (         expr.asm):00032         ; >>> Print (display) an unsigned number in arbitrary base
                      (         expr.asm):00033         ; PASSED: D = number to display, X = base
5887 BF018D           (         expr.asm):00034         prnum_          stx             base$                                           ;save base
588A 8D01             (         expr.asm):00035                                 bsr             @prnum
588C 39               (         expr.asm):00036                                 rts
                      (         expr.asm):00037         ;
588D 10B3018D         (         expr.asm):00038         @prnum          cmpd    base$                                           ;compare to base
5891 250E             (         expr.asm):00039                                 blo             @prdig                                          ;if this is most sig digit
5893 BE018D           (         expr.asm):00040                                 ldx             base$                                           ;else generate next digit
5896 BD59C8           (         expr.asm):00041                                 jsr             div16u_                                         ;B = digit, X = remaining digits
5899 3404             (         expr.asm):00042                                 pshs    b                                                       ;save to print later
589B 1F10             (         expr.asm):00043                                 tfr             x,d                                                     ;D = remaining digits
589D 8DEE             (         expr.asm):00044                                 bsr             @prnum                                          ;recurse to print them first
589F 3504             (         expr.asm):00045                                 puls    b                                                       ;now we print ours
58A1 CB30             (         expr.asm):00046         @prdig          addb    #'0'                                            ;assume decimal digit
58A3 C139             (         expr.asm):00047                                 cmpb    #'9'
58A5 2302             (         expr.asm):00048                                 bls             @prc                                            ;if it is
58A7 CB07             (         expr.asm):00049                                 addb    #'A'-10-'0'                                     ;else use alphas
58A9 7E545C           (         expr.asm):00050         @prc            jmp             prc_
                      (         expr.asm):00051         
                      (         expr.asm):00052         ; >>> Print (display) an unsigned number in hexadecimal
                      (         expr.asm):00053         ; CONSUMES: 0,PP = unsigned number
                      (         expr.asm):00054                                 DEF             3,"prx"
     58AC             (              DEF):00001         @me                     set             *
58AC 03               (              DEF):00002                                 fcb             3                                                               ;name length in bytes (MSB set = always execute)
58AD 707278           (              DEF):00003                                 fcc             "prx"                                                           ;name
58B0 5878             (              DEF):00004                                 fdb             _head
     58AC             (              DEF):00005         _head           set             @me
58B2 C630             (         expr.asm):00055                                 ldb             #'0'                                            ;display prefix
58B4 BD545C           (         expr.asm):00056                                 jsr             prc_
58B7 C678             (         expr.asm):00057                                 ldb             #'x'
58B9 BD545C           (         expr.asm):00058                                 jsr             prc_
58BC 3506             (         expr.asm):00059                                 puls    d                                                       ;D = number
58BE 8E0010           (         expr.asm):00060                                 ldx             #16                                                     ;X = base
58C1 8DC4             (         expr.asm):00061                                 bsr             prnum_
                      (         expr.asm):00062                                 NEXT
58C3 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         expr.asm):00063         
                      (         expr.asm):00064         ; >>> Print (display) an unsigned number in binary
                      (         expr.asm):00065         ; CONSUMES: 0,PP = unsigned number
                      (         expr.asm):00066                                 DEF             3,"prb"
     58C5             (              DEF):00001         @me                     set             *
58C5 03               (              DEF):00002                                 fcb             3                                                               ;name length in bytes (MSB set = always execute)
58C6 707262           (              DEF):00003                                 fcc             "prb"                                                           ;name
58C9 58AC             (              DEF):00004                                 fdb             _head
     58C5             (              DEF):00005         _head           set             @me
58CB C630             (         expr.asm):00067                                 ldb             #'0'                                            ;display prefix
58CD BD545C           (         expr.asm):00068                                 jsr             prc_
58D0 C662             (         expr.asm):00069                                 ldb             #'b'
58D2 BD545C           (         expr.asm):00070                                 jsr             prc_
58D5 3506             (         expr.asm):00071                                 puls    d                                                       ;D = number
58D7 8E0002           (         expr.asm):00072                                 ldx             #2                                                      ;X = base
58DA 8DAB             (         expr.asm):00073                                 bsr             prnum_
                      (         expr.asm):00074                                 NEXT
58DC 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         expr.asm):00075         
                      (         expr.asm):00076         ;@@@
                      (         expr.asm):00077         ;@@@ BASIC MATH
                      (         expr.asm):00078         ;@@@
                      (         expr.asm):00079         
                      (         expr.asm):00080         ; >>> Add
                      (         expr.asm):00081         ; CONSUMES: 0,PP = n2, 2,PP = n1
                      (         expr.asm):00082         ; PRODUCES: 0,PP = n1 + n2
                      (         expr.asm):00083                                 DEF             1,"+"
     58DE             (              DEF):00001         @me                     set             *
58DE 01               (              DEF):00002                                 fcb             1                                                               ;name length in bytes (MSB set = always execute)
58DF 2B               (              DEF):00003                                 fcc             "+"                                                             ;name
58E0 58C5             (              DEF):00004                                 fdb             _head
     58DE             (              DEF):00005         _head           set             @me
58E2 3506             (         expr.asm):00084         add                     puls    d
58E4 E3E4             (         expr.asm):00085         @add            addd    ,s
58E6 EDE4             (         expr.asm):00086                                 std             ,s
                      (         expr.asm):00087                                 NEXT
58E8 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         expr.asm):00088         ;
                      (         expr.asm):00089         ; >>> Subtract 1
                      (         expr.asm):00090         ; CONSUMES: 0,PP = n
                      (         expr.asm):00091         ; PRODUCES:     0,PP = n-1
                      (         expr.asm):00092                                 DEF             2,"1-"
     58EA             (              DEF):00001         @me                     set             *
58EA 02               (              DEF):00002                                 fcb             2                                                               ;name length in bytes (MSB set = always execute)
58EB 312D             (              DEF):00003                                 fcc             "1-"                                                            ;name
58ED 58DE             (              DEF):00004                                 fdb             _head
     58EA             (              DEF):00005         _head           set             @me
58EF CCFFFF           (         expr.asm):00093         sub1            ldd             #-1
58F2 20F0             (         expr.asm):00094                                 bra             @add
                      (         expr.asm):00095         ;
                      (         expr.asm):00096         ; >>> Add 1
                      (         expr.asm):00097                                 DEF             2,"1+"
     58F4             (              DEF):00001         @me                     set             *
58F4 02               (              DEF):00002                                 fcb             2                                                               ;name length in bytes (MSB set = always execute)
58F5 312B             (              DEF):00003                                 fcc             "1+"                                                            ;name
58F7 58EA             (              DEF):00004                                 fdb             _head
     58F4             (              DEF):00005         _head           set             @me
58F9 CC0001           (         expr.asm):00098         add1            ldd             #1
58FC 20E6             (         expr.asm):00099                                 bra             @add
                      (         expr.asm):00100         
                      (         expr.asm):00101         ; >>> Subtract
                      (         expr.asm):00102         ; CONSUMES: 0,PP = n2, 2,PP = n1
                      (         expr.asm):00103         ; PRODUCES: 0,PP = n1 - n2
                      (         expr.asm):00104                                 DEF             1,"-"
     58FE             (              DEF):00001         @me                     set             *
58FE 01               (              DEF):00002                                 fcb             1                                                               ;name length in bytes (MSB set = always execute)
58FF 2D               (              DEF):00003                                 fcc             "-"                                                             ;name
5900 58F4             (              DEF):00004                                 fdb             _head
     58FE             (              DEF):00005         _head           set             @me
5902 EC62             (         expr.asm):00105                                 ldd             2,s
5904 A3E1             (         expr.asm):00106                                 subd    ,s++
5906 EDE4             (         expr.asm):00107                                 std             ,s
                      (         expr.asm):00108                                 NEXT
5908 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         expr.asm):00109         
                      (         expr.asm):00110         ; >>> Unsigned multiply
                      (         expr.asm):00111         ; CONSUMES: 0,PP = n2, 2,PP = n1
                      (         expr.asm):00112         ; PRODUCES: 0,PP = n1 * n2
                      (         expr.asm):00113                                 DEF             2,"u*"
     590A             (              DEF):00001         @me                     set             *
590A 02               (              DEF):00002                                 fcb             2                                                               ;name length in bytes (MSB set = always execute)
590B 752A             (              DEF):00003                                 fcc             "u*"                                                            ;name
590D 58FE             (              DEF):00004                                 fdb             _head
     590A             (              DEF):00005         _head           set             @me
590F 3516             (         expr.asm):00114                                 puls    d,x                                                     ;D = n2, X = n1
5911 8D04             (         expr.asm):00115                                 bsr             mul16u_                                         ;X = n1 * n2
5913 3410             (         expr.asm):00116                                 pshs    x
                      (         expr.asm):00117                                 NEXT
5915 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         expr.asm):00118         
                      (         expr.asm):00119         ; Unsigned 16 bit multiply
                      (         expr.asm):00120         ; PASSED:  D = n1, X = n2
                      (         expr.asm):00121         ; RETURNS: X,D = low 16 bits of unsigned product
5917 3416             (         expr.asm):00122         mul16u_         pshs    d,x
5919 1F18             (         expr.asm):00123                                 tfr             x,a
591B 3D               (         expr.asm):00124                                 mul
591C 1E01             (         expr.asm):00125                                 exg             d,x
591E E661             (         expr.asm):00126                                 ldb             1,s
5920 3D               (         expr.asm):00127                                 mul
5921 1F98             (         expr.asm):00128                                 tfr             b,a
5923 5F               (         expr.asm):00129                                 clrb
5924 308B             (         expr.asm):00130                                 leax    d,x
5926 E6E4             (         expr.asm):00131                                 ldb             ,s
5928 A663             (         expr.asm):00132                                 lda             3,s
592A 3D               (         expr.asm):00133                                 mul
592B 1F98             (         expr.asm):00134                                 tfr             b,a
592D 5F               (         expr.asm):00135                                 clrb
592E 308B             (         expr.asm):00136                                 leax    d,x
5930 1F10             (         expr.asm):00137                                 tfr             x,d
5932 3264             (         expr.asm):00138                                 leas    4,s
5934 39               (         expr.asm):00139                                 rts
                      (         expr.asm):00140         
                      (         expr.asm):00141         ; >>> Signed multiply ($$$ NEEDED?)
                      (         expr.asm):00142         ; CONSUMES: 0,PP = n2, 2,PP = n1
                      (         expr.asm):00143         ; PRODUCES: 0,PP = n1 * n2
                      (         expr.asm):00144                                 DEF             1,"*"
     5935             (              DEF):00001         @me                     set             *
5935 01               (              DEF):00002                                 fcb             1                                                               ;name length in bytes (MSB set = always execute)
5936 2A               (              DEF):00003                                 fcc             "*"                                                             ;name
5937 590A             (              DEF):00004                                 fdb             _head
     5935             (              DEF):00005         _head           set             @me
5939 3516             (         expr.asm):00145                                 puls    d,x                                                     ;D = n2, X = n1
593B 8D0E             (         expr.asm):00146                                 bsr             signs$_                                         ;N flag is sign of result
593D 3401             (         expr.asm):00147                                 pshs    cc
593F 8DD6             (         expr.asm):00148                                 bsr             mul16u_                                         ;D = unsigned product
5941 3501             (         expr.asm):00149                                 puls    cc
5943 2402             (         expr.asm):00150                                 bcc             @done                                           ;if positive result
5945 8D2B             (         expr.asm):00151                                 bsr             neg16_                                          ;else negative result
5947 3406             (         expr.asm):00152         @done           pshs    d
                      (         expr.asm):00153                                 NEXT
5949 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         expr.asm):00154         
                      (         expr.asm):00155         ; >>> Adjust signs of binary op operands
                      (         expr.asm):00156         ; PASSED:  D = n2, X = n1
                      (         expr.asm):00157         ; RETURNS: D,X = absolute values, CS if result should be negative else CC
594B 6FE2             (         expr.asm):00158         signs$_         clr             ,-s                                                     ;0,s will tell result sign
594D 4D               (         expr.asm):00159                                 tsta
594E 2A04             (         expr.asm):00160                                 bpl             @n2                                                     ;if n1 is positive
5950 8D20             (         expr.asm):00161                                 bsr             neg16_                                          ;else make it positive
5952 6CE4             (         expr.asm):00162                                 inc             ,s                                                      ;and flip sign bit
5954 1E01             (         expr.asm):00163         @n2                     exg             d,x                                                     ;D = n1, X = n2
5956 4D               (         expr.asm):00164                                 tsta
5957 2A04             (         expr.asm):00165                                 bpl             @res                                            ;if already positive
5959 8D17             (         expr.asm):00166                                 bsr             neg16_                                          ;else make it so
595B 6CE4             (         expr.asm):00167                                 inc             ,s                                                      ;and flip sign
595D 1E01             (         expr.asm):00168         @res            exg             d,x                                                     ;D = n2, X = n1
595F 64E4             (         expr.asm):00169                                 lsr             ,s                                                      ;CS = neg result else CC
5961 3261             (         expr.asm):00170                                 leas    1,s
5963 39               (         expr.asm):00171                                 rts
                      (         expr.asm):00172         
                      (         expr.asm):00173         ; >>> Negate value
                      (         expr.asm):00174         ; CONSUMES: 0,PP = number
                      (         expr.asm):00175         ; PRODUCES: 0,PP = -number
                      (         expr.asm):00176                                 DEF             3,"neg"
     5964             (              DEF):00001         @me                     set             *
5964 03               (              DEF):00002                                 fcb             3                                                               ;name length in bytes (MSB set = always execute)
5965 6E6567           (              DEF):00003                                 fcc             "neg"                                                           ;name
5968 5935             (              DEF):00004                                 fdb             _head
     5964             (              DEF):00005         _head           set             @me
596A ECE4             (         expr.asm):00177                                 ldd             ,s                                                      ;D = number
596C 8D04             (         expr.asm):00178                                 bsr             neg16_                                          ;D = -D
596E EDE4             (         expr.asm):00179                                 std             ,s
                      (         expr.asm):00180                                 NEXT
5970 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         expr.asm):00181         
                      (         expr.asm):00182         ; >>> Negate 16 bit value
                      (         expr.asm):00183         ; PASSED:  D = value
                      (         expr.asm):00184         ; RETURNS: D = -value
5972 43               (         expr.asm):00185         neg16_          coma
5973 53               (         expr.asm):00186                                 comb
5974 C30001           (         expr.asm):00187                                 addd    #1                                                      ;D = -D
5977 39               (         expr.asm):00188                                 rts
                      (         expr.asm):00189         
                      (         expr.asm):00190         ; >>> Unsigned divide
                      (         expr.asm):00191         ; CONSUMES: 0,PP = n2, 2,PP = n1
                      (         expr.asm):00192         ; PRODUCES: 0,PP = n1 / n2
                      (         expr.asm):00193                                 DEF             2,"u/"
     5978             (              DEF):00001         @me                     set             *
5978 02               (              DEF):00002                                 fcb             2                                                               ;name length in bytes (MSB set = always execute)
5979 752F             (              DEF):00003                                 fcc             "u/"                                                            ;name
597B 5964             (              DEF):00004                                 fdb             _head
     5978             (              DEF):00005         _head           set             @me
597D 3516             (         expr.asm):00194                                 puls    d,x                                                     ;D = n2, X = n1
597F 1E01             (         expr.asm):00195                                 exg             d,x                                                     ;D = n1, X = n2
5981 8D45             (         expr.asm):00196                                 bsr             div16u_                                         ;D = remainder, X = quotient
5983 3410             (         expr.asm):00197                                 pshs    x
                      (         expr.asm):00198                                 NEXT
5985 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         expr.asm):00199         
                      (         expr.asm):00200         ; >>> Signed divide
                      (         expr.asm):00201         ; CONSUMES: 0,PP = n2, 2,PP = n1
                      (         expr.asm):00202         ; PRODUCES: 0,PP = n1 / n2
                      (         expr.asm):00203                                 DEF             1,"/"
     5987             (              DEF):00001         @me                     set             *
5987 01               (              DEF):00002                                 fcb             1                                                               ;name length in bytes (MSB set = always execute)
5988 2F               (              DEF):00003                                 fcc             "/"                                                             ;name
5989 5978             (              DEF):00004                                 fdb             _head
     5987             (              DEF):00005         _head           set             @me
598B 3516             (         expr.asm):00204                                 puls    d,x                                                     ;D = n2, X = n1
598D 1E01             (         expr.asm):00205                                 exg             d,x                                                     ;D = n1, X = n2
598F 8DBA             (         expr.asm):00206                                 bsr             signs$_                                         ;N flag is sign of result
5991 3401             (         expr.asm):00207                                 pshs    cc
5993 8D33             (         expr.asm):00208                                 bsr             div16u_                                         ;D = remainder, X = quotient
5995 1F10             (         expr.asm):00209                                 tfr             x,d
5997 3501             (         expr.asm):00210                                 puls    cc
5999 2402             (         expr.asm):00211                                 bcc             @done                                           ;if positive result
599B 8DD5             (         expr.asm):00212                                 bsr             neg16_                                          ;else negative result
599D 3406             (         expr.asm):00213         @done           pshs    d
                      (         expr.asm):00214                                 NEXT
599F 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         expr.asm):00215         
                      (         expr.asm):00216         ; >>> Unsigned modulo
                      (         expr.asm):00217         ; CONSUMES: 0,PP = n2, 2,PP = n1
                      (         expr.asm):00218         ; PRODUCES: 0,PP = n1 % n2
                      (         expr.asm):00219                                 DEF             2,"u%"
     59A1             (              DEF):00001         @me                     set             *
59A1 02               (              DEF):00002                                 fcb             2                                                               ;name length in bytes (MSB set = always execute)
59A2 7525             (              DEF):00003                                 fcc             "u%"                                                            ;name
59A4 5987             (              DEF):00004                                 fdb             _head
     59A1             (              DEF):00005         _head           set             @me
59A6 3516             (         expr.asm):00220                                 puls    d,x                                                     ;D = n2, X = n1
59A8 1E01             (         expr.asm):00221                                 exg             d,x                                                     ;D = n1, X = n2
59AA 8D1C             (         expr.asm):00222                                 bsr             div16u_                                         ;D = remainder, X = quotient
59AC 3406             (         expr.asm):00223                                 pshs    d
                      (         expr.asm):00224                                 NEXT
59AE 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         expr.asm):00225         
                      (         expr.asm):00226         ; >>> Signed modulo
                      (         expr.asm):00227         ; CONSUMES: 0,PP = n2, 2,PP = n1
                      (         expr.asm):00228         ; PRODUCES: 0,PP = n1 % n2
                      (         expr.asm):00229                                 DEF             1,"%"
     59B0             (              DEF):00001         @me                     set             *
59B0 01               (              DEF):00002                                 fcb             1                                                               ;name length in bytes (MSB set = always execute)
59B1 25               (              DEF):00003                                 fcc             "%"                                                             ;name
59B2 59A1             (              DEF):00004                                 fdb             _head
     59B0             (              DEF):00005         _head           set             @me
59B4 3516             (         expr.asm):00230                                 puls    d,x                                                     ;D = n2, X = n1
59B6 1E01             (         expr.asm):00231                                 exg             d,x                                                     ;D = n1, X = n2
59B8 8D91             (         expr.asm):00232                                 bsr             signs$_                                         ;N flag is sign of result
59BA 3401             (         expr.asm):00233                                 pshs    cc
59BC 8D0A             (         expr.asm):00234                                 bsr             div16u_                                         ;D = remainder, X = quotient
59BE 3501             (         expr.asm):00235                                 puls    cc
59C0 2402             (         expr.asm):00236                                 bcc             @done                                           ;if positive result
59C2 8DAE             (         expr.asm):00237                                 bsr             neg16_                                          ;else negative result
59C4 3406             (         expr.asm):00238         @done           pshs    d
                      (         expr.asm):00239                                 NEXT
59C6 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         expr.asm):00240         
                      (         expr.asm):00241         ; Unsigned 16 bit divide
                      (         expr.asm):00242         ; PASSED:  D = dividend, X = divisor
                      (         expr.asm):00243         ; RETURNS: D = remainder, X = quotient
59C8 3416             (         expr.asm):00244         div16u_         pshs    x,d                                                     ;0,s = dividend, 2,s = divisor
59CA 4F               (         expr.asm):00245                                 clra                                                            ;D = accumulator (inited to 0)
59CB 5F               (         expr.asm):00246                                 clrb
                      (         expr.asm):00247         ;
59CC 8E0010           (         expr.asm):00248                                 ldx             #16
59CF 6861             (         expr.asm):00249         @lp                     lsl             1,s                                                     ; acc,dividend <<= 1
59D1 6960             (         expr.asm):00250                                 rol             0,s
59D3 59               (         expr.asm):00251                                 rolb
59D4 49               (         expr.asm):00252                                 rola
59D5 10A362           (         expr.asm):00253                                 cmpd    2,s
59D8 2504             (         expr.asm):00254                                 blo             @nxt                                            ;if next result bit is 0
59DA A362             (         expr.asm):00255                                 subd    2,s                                                     ;else actually subtract it
59DC 6C61             (         expr.asm):00256                                 inc             1,s                                                     ;and set result bit
59DE 301F             (         expr.asm):00257         @nxt            leax    -1,x
59E0 26ED             (         expr.asm):00258                                 bne             @lp                                                     ;if not done yet
                      (         expr.asm):00259         ;
59E2 3510             (         expr.asm):00260                                 puls    x                                                       ;D = remainder, X = quotient
59E4 3262             (         expr.asm):00261                                 leas    2,s
59E6 39               (         expr.asm):00262                                 rts
                      (         expr.asm):00263         
                      (         expr.asm):00264         ; >>> Bitwise And
                      (         expr.asm):00265         ; CONSUMES: 0,PP = n2, 2,PP = n1
                      (         expr.asm):00266         ; PRODUCES: 0,PP = n1 & n2
                      (         expr.asm):00267                                 DEF             1,"&"
     59E7             (              DEF):00001         @me                     set             *
59E7 01               (              DEF):00002                                 fcb             1                                                               ;name length in bytes (MSB set = always execute)
59E8 26               (              DEF):00003                                 fcc             "&"                                                             ;name
59E9 59B0             (              DEF):00004                                 fdb             _head
     59E7             (              DEF):00005         _head           set             @me
59EB 3506             (         expr.asm):00268                                 puls    d
59ED A4E4             (         expr.asm):00269                                 anda    ,s
59EF E461             (         expr.asm):00270                                 andb    1,s
59F1 EDE4             (         expr.asm):00271         @save           std             ,s
                      (         expr.asm):00272                                 NEXT
59F3 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         expr.asm):00273         ;
                      (         expr.asm):00274         ; >>> Bitwise Or
                      (         expr.asm):00275         ; CONSUMES: 0,PP = n2, 2,PP = n1
                      (         expr.asm):00276         ; PRODUCES: 0,PP = n1 | n2
                      (         expr.asm):00277                                 DEF             1,"|"
     59F5             (              DEF):00001         @me                     set             *
59F5 01               (              DEF):00002                                 fcb             1                                                               ;name length in bytes (MSB set = always execute)
59F6 7C               (              DEF):00003                                 fcc             "|"                                                             ;name
59F7 59E7             (              DEF):00004                                 fdb             _head
     59F5             (              DEF):00005         _head           set             @me
59F9 3506             (         expr.asm):00278                                 puls    d
59FB AAE4             (         expr.asm):00279                                 ora             ,s
59FD EA61             (         expr.asm):00280                                 orb             1,s
59FF 20F0             (         expr.asm):00281                                 bra             @save
                      (         expr.asm):00282         ;
                      (         expr.asm):00283         ; >>> Bitwise Exclusive Or
                      (         expr.asm):00284         ; CONSUMES: 0,PP = n2, 2,PP = n1
                      (         expr.asm):00285         ; PRODUCES: 0,PP = n1 ^ n2
                      (         expr.asm):00286                                 DEF             1,"^"
     5A01             (              DEF):00001         @me                     set             *
5A01 01               (              DEF):00002                                 fcb             1                                                               ;name length in bytes (MSB set = always execute)
5A02 5E               (              DEF):00003                                 fcc             "^"                                                             ;name
5A03 59F5             (              DEF):00004                                 fdb             _head
     5A01             (              DEF):00005         _head           set             @me
5A05 3506             (         expr.asm):00287                                 puls    d
5A07 A8E4             (         expr.asm):00288                                 eora    ,s
5A09 E861             (         expr.asm):00289                                 eorb    1,s
5A0B 20E4             (         expr.asm):00290                                 bra             @save
                      (         expr.asm):00291         
                      (         expr.asm):00292         ; >>> Shift Left one bit
                      (         expr.asm):00293                                 DEF             2,"<<"
     5A0D             (              DEF):00001         @me                     set             *
5A0D 02               (              DEF):00002                                 fcb             2                                                               ;name length in bytes (MSB set = always execute)
5A0E 3C3C             (              DEF):00003                                 fcc             "<<"                                                            ;name
5A10 5A01             (              DEF):00004                                 fdb             _head
     5A0D             (              DEF):00005         _head           set             @me
5A12 6861             (         expr.asm):00294                                 lsl             1,s
5A14 69E4             (         expr.asm):00295                                 rol             ,s
                      (         expr.asm):00296                                 NEXT
5A16 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         expr.asm):00297         
                      (         expr.asm):00298         ; >>> Signed Shift Right one bit
                      (         expr.asm):00299                                 DEF             2,">>"
     5A18             (              DEF):00001         @me                     set             *
5A18 02               (              DEF):00002                                 fcb             2                                                               ;name length in bytes (MSB set = always execute)
5A19 3E3E             (              DEF):00003                                 fcc             ">>"                                                            ;name
5A1B 5A0D             (              DEF):00004                                 fdb             _head
     5A18             (              DEF):00005         _head           set             @me
5A1D 67E4             (         expr.asm):00300                                 asr             ,s
5A1F 6661             (         expr.asm):00301                                 ror             1,s
                      (         expr.asm):00302                                 NEXT
5A21 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         expr.asm):00303         
                      (         expr.asm):00304         ; >>> Unsigned Shift Right one bit
                      (         expr.asm):00305                                 DEF             3,"u>>"
     5A23             (              DEF):00001         @me                     set             *
5A23 03               (              DEF):00002                                 fcb             3                                                               ;name length in bytes (MSB set = always execute)
5A24 753E3E           (              DEF):00003                                 fcc             "u>>"                                                           ;name
5A27 5A18             (              DEF):00004                                 fdb             _head
     5A23             (              DEF):00005         _head           set             @me
5A29 64E4             (         expr.asm):00306                                 lsr             ,s
5A2B 6661             (         expr.asm):00307                                 ror             1,s
                      (         expr.asm):00308                                 NEXT
5A2D 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         expr.asm):00309         
                      (         expr.asm):00310         ;@@@
                      (         expr.asm):00311         ;@@@ COMPARISONS
                      (         expr.asm):00312         ;@@@
                      (         expr.asm):00313         
                      (         expr.asm):00314         ; >>> Equal
                      (         expr.asm):00315         ; CONSUMES: 0,PP = n2, 2,PP = n1
                      (         expr.asm):00316         ; PRODUCES: 0,PP = 1 if n1 == n2 else 0
                      (         expr.asm):00317                                 DEF             2,"=="
     5A2F             (              DEF):00001         @me                     set             *
5A2F 02               (              DEF):00002                                 fcb             2                                                               ;name length in bytes (MSB set = always execute)
5A30 3D3D             (              DEF):00003                                 fcc             "=="                                                            ;name
5A32 5A23             (              DEF):00004                                 fdb             _head
     5A2F             (              DEF):00005         _head           set             @me
5A34 3506             (         expr.asm):00318         equal           puls    d
5A36 10A3E1           (         expr.asm):00319                                 cmpd    ,s++
5A39 1027F70B         (         expr.asm):00320                                 lbeq    push1                                                   ;if n1 == n2
5A3D 16F6FE           (         expr.asm):00321         @false          lbra    push0                                                   ;else n1 != n2
                      (         expr.asm):00322         ;
                      (         expr.asm):00323         ; >>> Not Equals
                      (         expr.asm):00324         ; CONSUMES: 0,PP = n2, 2,PP = n1
                      (         expr.asm):00325         ; PRODUCES: 0,PP = 1 if n1 != n2 else 0
                      (         expr.asm):00326                                 DEF             2,"!="
     5A40             (              DEF):00001         @me                     set             *
5A40 02               (              DEF):00002                                 fcb             2                                                               ;name length in bytes (MSB set = always execute)
5A41 213D             (              DEF):00003                                 fcc             "!="                                                            ;name
5A43 5A2F             (              DEF):00004                                 fdb             _head
     5A40             (              DEF):00005         _head           set             @me
5A45 3506             (         expr.asm):00327                                 puls    d
5A47 10A3E1           (         expr.asm):00328                                 cmpd    ,s++
5A4A 1026F6FA         (         expr.asm):00329                                 lbne    push1                                                   ;if n1 != n2
5A4E 20ED             (         expr.asm):00330                                 bra             @false                                                  ;else n1 == n2
                      (         expr.asm):00331         ;
                      (         expr.asm):00332         ; >>> Signed Less Than
                      (         expr.asm):00333         ; CONSUMES: 0,PP = n2, 2,PP = n1
                      (         expr.asm):00334         ; PRODUCES: 0,PP = 1 if n1 < n2 else 0
                      (         expr.asm):00335                                 DEF             1,"<"
     5A50             (              DEF):00001         @me                     set             *
5A50 01               (              DEF):00002                                 fcb             1                                                               ;name length in bytes (MSB set = always execute)
5A51 3C               (              DEF):00003                                 fcc             "<"                                                             ;name
5A52 5A40             (              DEF):00004                                 fdb             _head
     5A50             (              DEF):00005         _head           set             @me
5A54 3506             (         expr.asm):00336                                 puls    d
5A56 10A3E1           (         expr.asm):00337                                 cmpd    ,s++
5A59 102EF6EB         (         expr.asm):00338                                 lbgt    push1                                                   ;if n1 < n2
5A5D 20DE             (         expr.asm):00339                                 bra             @false
                      (         expr.asm):00340         ;
                      (         expr.asm):00341         ; >>> Signed Greater Than
                      (         expr.asm):00342         ; CONSUMES: 0,PP = n2, 2,PP = n1
                      (         expr.asm):00343         ; PRODUCES: 0,PP = 1 if n1 < n2 else 0
                      (         expr.asm):00344                                 DEF             1,">"
     5A5F             (              DEF):00001         @me                     set             *
5A5F 01               (              DEF):00002                                 fcb             1                                                               ;name length in bytes (MSB set = always execute)
5A60 3E               (              DEF):00003                                 fcc             ">"                                                             ;name
5A61 5A50             (              DEF):00004                                 fdb             _head
     5A5F             (              DEF):00005         _head           set             @me
5A63 3506             (         expr.asm):00345                                 puls    d
5A65 10A3E1           (         expr.asm):00346                                 cmpd    ,s++
5A68 102DF6DC         (         expr.asm):00347                                 lblt    push1                                                   ;if n1 > n2
5A6C 20CF             (         expr.asm):00348                                 bra             @false
                      (         expr.asm):00349         ;
                      (         expr.asm):00350         ; >>> Signed Less Than or Equal
                      (         expr.asm):00351         ; CONSUMES: 0,PP = n2, 2,PP = n1
                      (         expr.asm):00352         ; PRODUCES: 0,PP = 1 if n1 < n2 else 0
                      (         expr.asm):00353                                 DEF             2,"<="
     5A6E             (              DEF):00001         @me                     set             *
5A6E 02               (              DEF):00002                                 fcb             2                                                               ;name length in bytes (MSB set = always execute)
5A6F 3C3D             (              DEF):00003                                 fcc             "<="                                                            ;name
5A71 5A5F             (              DEF):00004                                 fdb             _head
     5A6E             (              DEF):00005         _head           set             @me
5A73 3506             (         expr.asm):00354                                 puls    d
5A75 10A3E1           (         expr.asm):00355                                 cmpd    ,s++
5A78 102CF6CC         (         expr.asm):00356                                 lbge    push1                                                   ;if n1 <= n2
5A7C 20BF             (         expr.asm):00357                                 bra             @false
                      (         expr.asm):00358         ;
                      (         expr.asm):00359         ; >>> Signed Greater Than or Equal
                      (         expr.asm):00360         ; CONSUMES: 0,PP = n2, 2,PP = n1
                      (         expr.asm):00361         ; PRODUCES: 0,PP = 1 if n1 < n2 else 0
                      (         expr.asm):00362                                 DEF             2,">="
     5A7E             (              DEF):00001         @me                     set             *
5A7E 02               (              DEF):00002                                 fcb             2                                                               ;name length in bytes (MSB set = always execute)
5A7F 3E3D             (              DEF):00003                                 fcc             ">="                                                            ;name
5A81 5A6E             (              DEF):00004                                 fdb             _head
     5A7E             (              DEF):00005         _head           set             @me
5A83 3506             (         expr.asm):00363         gteq            puls    d
5A85 10A3E1           (         expr.asm):00364                                 cmpd    ,s++
5A88 102FF6BC         (         expr.asm):00365                                 lble    push1                                                   ;if n1 >= n2
5A8C 20AF             (         expr.asm):00366                                 bra             @false
                      (         expr.asm):00367         ;
                      (         expr.asm):00368         ; >>> Unsigned Less Than
                      (         expr.asm):00369         ; CONSUMES: 0,PP = n2, 2,PP = n1
                      (         expr.asm):00370         ; PRODUCES: 0,PP = 1 if n1 < n2 else 0
                      (         expr.asm):00371                                 DEF             2,"u<"
     5A8E             (              DEF):00001         @me                     set             *
5A8E 02               (              DEF):00002                                 fcb             2                                                               ;name length in bytes (MSB set = always execute)
5A8F 753C             (              DEF):00003                                 fcc             "u<"                                                            ;name
5A91 5A7E             (              DEF):00004                                 fdb             _head
     5A8E             (              DEF):00005         _head           set             @me
5A93 3506             (         expr.asm):00372                                 puls    d
5A95 10A3E1           (         expr.asm):00373                                 cmpd    ,s++
5A98 1022F6AC         (         expr.asm):00374                                 lbhi    push1                                                   ;if n1 < n2
5A9C 209F             (         expr.asm):00375                                 bra             @false
                      (         expr.asm):00376         ;
                      (         expr.asm):00377         ; >>> Unsigned Greater Than
                      (         expr.asm):00378         ; CONSUMES: 0,PP = n2, 2,PP = n1
                      (         expr.asm):00379         ; PRODUCES: 0,PP = 1 if n1 < n2 else 0
                      (         expr.asm):00380                                 DEF             2,"u>"
     5A9E             (              DEF):00001         @me                     set             *
5A9E 02               (              DEF):00002                                 fcb             2                                                               ;name length in bytes (MSB set = always execute)
5A9F 753E             (              DEF):00003                                 fcc             "u>"                                                            ;name
5AA1 5A8E             (              DEF):00004                                 fdb             _head
     5A9E             (              DEF):00005         _head           set             @me
5AA3 3506             (         expr.asm):00381                                 puls    d
5AA5 10A3E1           (         expr.asm):00382                                 cmpd    ,s++
5AA8 1025F69C         (         expr.asm):00383                                 lblo    push1                                                   ;if n1 > n2
5AAC 208F             (         expr.asm):00384                                 bra             @false
                      (         expr.asm):00385         
                      (         expr.asm):00386         ; >>> Unsigned Less Than or Equal
                      (         expr.asm):00387         ; CONSUMES: 0,PP = n2, 2,PP = n1
                      (         expr.asm):00388         ; PRODUCES: 0,PP = 1 if n1 < n2 else 0
                      (         expr.asm):00389                                 DEF             3,"u<="
     5AAE             (              DEF):00001         @me                     set             *
5AAE 03               (              DEF):00002                                 fcb             3                                                               ;name length in bytes (MSB set = always execute)
5AAF 753C3D           (              DEF):00003                                 fcc             "u<="                                                           ;name
5AB2 5A9E             (              DEF):00004                                 fdb             _head
     5AAE             (              DEF):00005         _head           set             @me
5AB4 3506             (         expr.asm):00390                                 puls    d
5AB6 10A3E1           (         expr.asm):00391                                 cmpd    ,s++
5AB9 1024F68B         (         expr.asm):00392                                 lbhs    push1                                                   ;if n1 <= n2
5ABD 16F67E           (         expr.asm):00393         @false          lbra    push0
                      (         expr.asm):00394         ;
                      (         expr.asm):00395         ; >>> Unsigned Greater Than
                      (         expr.asm):00396         ; CONSUMES: 0,PP = n2, 2,PP = n1
                      (         expr.asm):00397         ; PRODUCES: 0,PP = 1 if n1 < n2 else 0
                      (         expr.asm):00398                                 DEF             3,"u>="
     5AC0             (              DEF):00001         @me                     set             *
5AC0 03               (              DEF):00002                                 fcb             3                                                               ;name length in bytes (MSB set = always execute)
5AC1 753E3D           (              DEF):00003                                 fcc             "u>="                                                           ;name
5AC4 5AAE             (              DEF):00004                                 fdb             _head
     5AC0             (              DEF):00005         _head           set             @me
5AC6 3506             (         expr.asm):00399                                 puls    d
5AC8 10A3E1           (         expr.asm):00400                                 cmpd    ,s++
5ACB 1023F679         (         expr.asm):00401                                 lbls    push1                                                   ;if n1 >= n2
5ACF 20EC             (         expr.asm):00402                                 bra             @false
                      (         expr.asm):00403         
                      (         expr.asm):00404         ; >>> Signed minimum
                      (         expr.asm):00405         ; <n1> <n2> min -> smaller of the two
                      (         expr.asm):00406                                 DEF             3,"min"
     5AD1             (              DEF):00001         @me                     set             *
5AD1 03               (              DEF):00002                                 fcb             3                                                               ;name length in bytes (MSB set = always execute)
5AD2 6D696E           (              DEF):00003                                 fcc             "min"                                                           ;name
5AD5 5AC0             (              DEF):00004                                 fdb             _head
     5AD1             (              DEF):00005         _head           set             @me
5AD7 3506             (         expr.asm):00407                                 puls    d                                                               ;D = n2
5AD9 10A3E4           (         expr.asm):00408                                 cmpd    ,s
5ADC 2E02             (         expr.asm):00409                                 bgt             @n1                                                             ;if n1 is smaller
5ADE EDE4             (         expr.asm):00410         @n2                     std             ,s                                                              ;else n2 is
5AE0                  (         expr.asm):00411         @n1                     NEXT
5AE0 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         expr.asm):00412         ;
                      (         expr.asm):00413         ; >>> Unsigned minimum
                      (         expr.asm):00414         ; <n1> <n2> umin -> smaller of the two
                      (         expr.asm):00415                                 DEF             4,"umin"
     5AE2             (              DEF):00001         @me                     set             *
5AE2 04               (              DEF):00002                                 fcb             4                                                               ;name length in bytes (MSB set = always execute)
5AE3 756D696E         (              DEF):00003                                 fcc             "umin"                                                          ;name
5AE7 5AD1             (              DEF):00004                                 fdb             _head
     5AE2             (              DEF):00005         _head           set             @me
5AE9 3506             (         expr.asm):00416         umin            puls    d
5AEB 10A3E4           (         expr.asm):00417                                 cmpd    ,s
5AEE 22F0             (         expr.asm):00418                                 bhi             @n1
5AF0 20EC             (         expr.asm):00419                                 bra             @n2
                      (         expr.asm):00420         ;
                      (         expr.asm):00421         ; >>> Signed maximum
                      (         expr.asm):00422         ; <n1> <n2> umin -> larger of the two
                      (         expr.asm):00423                                 DEF             3,"max"
     5AF2             (              DEF):00001         @me                     set             *
5AF2 03               (              DEF):00002                                 fcb             3                                                               ;name length in bytes (MSB set = always execute)
5AF3 6D6178           (              DEF):00003                                 fcc             "max"                                                           ;name
5AF6 5AE2             (              DEF):00004                                 fdb             _head
     5AF2             (              DEF):00005         _head           set             @me
5AF8 3506             (         expr.asm):00424                                 puls    d
5AFA 10A3E4           (         expr.asm):00425                                 cmpd    ,s
5AFD 2DE1             (         expr.asm):00426                                 blt             @n1
5AFF 20DD             (         expr.asm):00427                                 bra             @n2
                      (         expr.asm):00428         ;
                      (         expr.asm):00429         ; >>> Unsigned maximum
                      (         expr.asm):00430         ; <n1> <n2> umin -> larger of the two
                      (         expr.asm):00431                                 DEF             4,"umax"
     5B01             (              DEF):00001         @me                     set             *
5B01 04               (              DEF):00002                                 fcb             4                                                               ;name length in bytes (MSB set = always execute)
5B02 756D6178         (              DEF):00003                                 fcc             "umax"                                                          ;name
5B06 5AF2             (              DEF):00004                                 fdb             _head
     5B01             (              DEF):00005         _head           set             @me
5B08 3506             (         expr.asm):00432                                 puls    d
5B0A 10A3E4           (         expr.asm):00433                                 cmpd    ,s
5B0D 25D1             (         expr.asm):00434                                 blo             @n1
5B0F 20CD             (         expr.asm):00435                                 bra             @n2
                      (    ./src/alf.asm):00077                                 include "defs.asm"
                      (         defs.asm):00001         ; "defs.asm" - mechanics of defining words for Alf
                      (         defs.asm):00002         ; 2022-nov-18 dww  created
                      (         defs.asm):00003         
                      (         defs.asm):00004         ;@@@
                      (         defs.asm):00005         ;@@@ VARIABLES
                      (         defs.asm):00006         ;@@@
                      (         defs.asm):00007         
                      (         defs.asm):00008         ; >>> Current Dictionary Pointer value
                      (         defs.asm):00009         ; PRODUCES: 0,PP = current DP value
                      (         defs.asm):00010                                 DEF             2,"dp"
     5B11             (              DEF):00001         @me                     set             *
5B11 02               (              DEF):00002                                 fcb             2                                                               ;name length in bytes (MSB set = always execute)
5B12 6470             (              DEF):00003                                 fcc             "dp"                                                            ;name
5B14 5B01             (              DEF):00004                                 fdb             _head
     5B11             (              DEF):00005         _head           set             @me
5B16                  (         defs.asm):00011         dp                      VAL
5B16 9D17             (              VAL):00001                                 jsr             <val$
5B18 0002             (         defs.asm):00012                                 fdb             dp$
                      (         defs.asm):00013         
                      (         defs.asm):00014         ; >>> Address of current dictionary pointer Dictionary Pointer
                      (         defs.asm):00015         ; PRODUCES: 0,PP = address of current Dictionary Pointer
                      (         defs.asm):00016                                 DEF             3,"dp&"
     5B1A             (              DEF):00001         @me                     set             *
5B1A 03               (              DEF):00002                                 fcb             3                                                               ;name length in bytes (MSB set = always execute)
5B1B 647026           (              DEF):00003                                 fcc             "dp&"                                                           ;name
5B1E 5B11             (              DEF):00004                                 fdb             _head
     5B1A             (              DEF):00005         _head           set             @me
5B20                  (         defs.asm):00017         dpa                     VAR
5B20 9D11             (              VAR):00001                                 jsr             <var$
5B22 0002             (         defs.asm):00018                                 fdb             dp$
                      (         defs.asm):00019         
                      (         defs.asm):00020         ; >>> Push current free space count.
                      (         defs.asm):00021         ; PRODUCES: 0,PP = number of bytes between DP and PP
                      (         defs.asm):00022                                 DEF             4,"free"
     5B24             (              DEF):00001         @me                     set             *
5B24 04               (              DEF):00002                                 fcb             4                                                               ;name length in bytes (MSB set = always execute)
5B25 66726565         (              DEF):00003                                 fcc             "free"                                                          ;name
5B29 5B1A             (              DEF):00004                                 fdb             _head
     5B24             (              DEF):00005         _head           set             @me
5B2B 1F40             (         defs.asm):00023         free            tfr             s,d
5B2D B30002           (         defs.asm):00024                                 subd    dp$
5B30 3406             (         defs.asm):00025                                 pshs    d
                      (         defs.asm):00026                                 NEXT
5B32 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         defs.asm):00027         
                      (         defs.asm):00028         ; >>> Return head of definitions list.
                      (         defs.asm):00029         ; PRODUCES: 0,PP = addr of most recently defined word
                      (         defs.asm):00030                                 DEF             4,"defs"
     5B34             (              DEF):00001         @me                     set             *
5B34 04               (              DEF):00002                                 fcb             4                                                               ;name length in bytes (MSB set = always execute)
5B35 64656673         (              DEF):00003                                 fcc             "defs"                                                          ;name
5B39 5B24             (              DEF):00004                                 fdb             _head
     5B34             (              DEF):00005         _head           set             @me
5B3B                  (         defs.asm):00031         defs            VAL
5B3B 9D17             (              VAL):00001                                 jsr             <val$
5B3D 0004             (         defs.asm):00032                                 fdb             defs$
                      (         defs.asm):00033         
                      (         defs.asm):00034         ; >>> Return address of word being defined
                      (         defs.asm):00035         ; PRODUCES: 0,PP = address of word currently being defined or 0
                      (         defs.asm):00036                                 DEF             4,"def$"
     5B3F             (              DEF):00001         @me                     set             *
5B3F 04               (              DEF):00002                                 fcb             4                                                               ;name length in bytes (MSB set = always execute)
5B40 64656624         (              DEF):00003                                 fcc             "def$"                                                          ;name
5B44 5B34             (              DEF):00004                                 fdb             _head
     5B3F             (              DEF):00005         _head           set             @me
5B46                  (         defs.asm):00037         def$            VAL
5B46 9D17             (              VAL):00001                                 jsr             <val$
5B48 0006             (         defs.asm):00038                                 fdb             def$$
                      (         defs.asm):00039         
                      (         defs.asm):00040         ;@@@
                      (         defs.asm):00041         ;@@@ WORDS
                      (         defs.asm):00042         ;@@@
                      (         defs.asm):00043         
                      (         defs.asm):00044         ; >>> Begin defining a new word
                      (         defs.asm):00045                                 DEF             1,":"
     5B4A             (              DEF):00001         @me                     set             *
5B4A 01               (              DEF):00002                                 fcb             1                                                               ;name length in bytes (MSB set = always execute)
5B4B 3A               (              DEF):00003                                 fcc             ":"                                                             ;name
5B4C 5B3F             (              DEF):00004                                 fdb             _head
     5B4A             (              DEF):00005         _head           set             @me
                      (         defs.asm):00046                                 WORDS
5B4E 9D06             (            WORDS):00001                                 jsr             <words$
5B50 5B5A             (         defs.asm):00047                                 fdb             def$bgn                                                 ;compile word header
5B52 5BEE             (         defs.asm):00048                                 fdb             complw                                                  ;compile JSR <words
5B54 9D06             (         defs.asm):00049                                 fcb             $9D,words$%256
5B56 52E8             (         defs.asm):00050                                 fdb             set_comp                                                ;change to compile mode
                      (         defs.asm):00051                                 DONE
5B58 500D             (             DONE):00001                                 fdb             done$
                      (         defs.asm):00052         
                      (         defs.asm):00053         ; >>> Compile header for a new word
5B5A                  (         defs.asm):00054         def$bgn         WORDS
5B5A 9D06             (            WORDS):00001                                 jsr             <words$
5B5C 5B78             (         defs.asm):00055                                 fdb             def$can                                                 ;cancel any in-progress definition
5B5E 5B165BF2000654FA (         defs.asm):00056                                 fdb             dp,pushlw,def$$,store                   ;save current DP as start of word in-progress
5B66 51FF             (         defs.asm):00057                                 fdb             rd$sym                                                  ;get name to DP
5B68 5B88             (         defs.asm):00058                                 fdb             comps$dp                                                ;compile name at DP
5B6A 5B3B5BDB         (         defs.asm):00059                                 fdb             defs,compw                                              ;compile link to current head
5B6E 5B465BF2000454FA (         defs.asm):00060                                 fdb             def$,pushlw,defs$,store                 ;word is new defs head
                      (         defs.asm):00061                                 DONE
5B76 500D             (             DONE):00001                                 fdb             done$
                      (         defs.asm):00062         
                      (         defs.asm):00063         ; >>> Cancel any current word definition
5B78 BE0006           (         defs.asm):00064         def$can         ldx             def$$
5B7B 2709             (         defs.asm):00065                                 beq             @next                                                   ;if no definition in progress
5B7D 7F0006           (         defs.asm):00066                                 clr             def$$+0
5B80 7F0007           (         defs.asm):00067                                 clr             def$$+1                                                 ;not defining a word
5B83 7E5C4D           (         defs.asm):00068                                 jmp             forgetx$                                                ;remove the in-progress word
                      (         defs.asm):00069         ;
5B86                  (         defs.asm):00070         @next           NEXT
5B86 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         defs.asm):00071         
                      (         defs.asm):00072         ; >>> Add string at DP to dictionary
5B88 BE0002           (         defs.asm):00073         comps$dp        ldx             dp$                                                             ;X = DP = start of string
5B8B E680             (         defs.asm):00074                                 ldb             ,x+                                                             ;B = string length, X = content start
5B8D 3A               (         defs.asm):00075                                 abx                                                                             ;X = addr after string
5B8E 9D25             (         defs.asm):00076                                 jsr             <set$dp                                                 ;update DP & check for mem full
                      (         defs.asm):00077                                 NEXT
5B90 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         defs.asm):00078         
                      (         defs.asm):00079         ; >>> Finish defining a new word
                      (         defs.asm):00080                                 DEF             1+_EXE,";"
     5B92             (              DEF):00001         @me                     set             *
5B92 81               (              DEF):00002                                 fcb             1+_EXE                                                          ;name length in bytes (MSB set = always execute)
5B93 3B               (              DEF):00003                                 fcc             ";"                                                             ;name
5B94 5B4A             (              DEF):00004                                 fdb             _head
     5B92             (              DEF):00005         _head           set             @me
                      (         defs.asm):00081                                 WORDS
5B96 9D06             (            WORDS):00001                                 jsr             <words$
5B98 5BEE500D         (         defs.asm):00082                                 fdb             complw,done$                                    ;compile return from word list
5B9C 5BA2             (         defs.asm):00083                                 fdb             def$end                                                 ;finish up definition
5B9E 52DF             (         defs.asm):00084                                 fdb             set_exec                                                ;back to execute mode
                      (         defs.asm):00085                                 DONE
5BA0 500D             (             DONE):00001                                 fdb             done$
                      (         defs.asm):00086         
                      (         defs.asm):00087         ; >>> Finish up current definition
5BA2                  (         defs.asm):00088         def$end         WORDS
5BA2 9D06             (            WORDS):00001                                 jsr             <words$
5BA4 5BA8             (         defs.asm):00089                                 fdb             def$clr                                                 ;no in-progress def
                      (         defs.asm):00090                                 DONE
5BA6 500D             (             DONE):00001                                 fdb             done$
                      (         defs.asm):00091         ;
5BA8 7F0006           (         defs.asm):00092         def$clr         clr             def$$+0
5BAB 7F0007           (         defs.asm):00093                                 clr             def$$+1                                                 ;not defining a word
                      (         defs.asm):00094                                 NEXT
5BAE 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         defs.asm):00095         
                      (         defs.asm):00096         ; >>> Allocate space at current DP
                      (         defs.asm):00097         ; CONSUMES: 0,PP = number of bytes to allocate
                      (         defs.asm):00098                                 DEF             6,"alloc$"
     5BB0             (              DEF):00001         @me                     set             *
5BB0 06               (              DEF):00002                                 fcb             6                                                               ;name length in bytes (MSB set = always execute)
5BB1 616C6C6F6324     (              DEF):00003                                 fcc             "alloc$"                                                                ;name
5BB7 5B92             (              DEF):00004                                 fdb             _head
     5BB0             (              DEF):00005         _head           set             @me
5BB9 308DA445         (         defs.asm):00099         alloc$          leax    dp$,pcr
5BBD 3506             (         defs.asm):00100                                 puls    d                                                               ;D = byte count
5BBF E384             (         defs.asm):00101                                 addd    ,x                                                              ;update DP
5BC1 ED84             (         defs.asm):00102                                 std             ,x
5BC3 9D28             (         defs.asm):00103                                 jsr             <mem$check                                              ;check for memory full
                      (         defs.asm):00104                                 NEXT
5BC5 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         defs.asm):00105         
                      (         defs.asm):00106         ; >>> Compile byte on top of stack
                      (         defs.asm):00107                                 DEF             1,"."
     5BC7             (              DEF):00001         @me                     set             *
5BC7 01               (              DEF):00002                                 fcb             1                                                               ;name length in bytes (MSB set = always execute)
5BC8 2E               (              DEF):00003                                 fcc             "."                                                             ;name
5BC9 5BB0             (              DEF):00004                                 fdb             _head
     5BC7             (              DEF):00005         _head           set             @me
5BCB 3506             (         defs.asm):00108         compb           puls    d                                                               ;B = byte from stack
5BCD BE0002           (         defs.asm):00109         @compb          ldx             dp$                                                             ;store byte in dict
5BD0 E780             (         defs.asm):00110                                 stb             ,x+
5BD2 BF0002           (         defs.asm):00111                                 stx             dp$
                      (         defs.asm):00112                                 NEXT
5BD5 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         defs.asm):00113         
                      (         defs.asm):00114         ; >>> Compile word on top of stack.
                      (         defs.asm):00115         ; CONSUMES: 0,PP = word value
                      (         defs.asm):00116                                 DEF             1,"\,"
     5BD7             (              DEF):00001         @me                     set             *
5BD7 01               (              DEF):00002                                 fcb             1                                                               ;name length in bytes (MSB set = always execute)
5BD8 2C               (              DEF):00003                                 fcc             ","                                                             ;name
5BD9 5BC7             (              DEF):00004                                 fdb             _head
     5BD7             (              DEF):00005         _head           set             @me
5BDB 3506             (         defs.asm):00117         compw           puls    d                                                               ;D = word from stack
5BDD BE0002           (         defs.asm):00118         @compw          ldx             dp$                                                             ;store word in dict
5BE0 ED81             (         defs.asm):00119                                 std             ,x++
5BE2 BF0002           (         defs.asm):00120                                 stx             dp$
                      (         defs.asm):00121                                 NEXT
5BE5 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         defs.asm):00122         ;
                      (         defs.asm):00123         ; >>> Compile literal word (pointed to by IP)
                      (         defs.asm):00124                                 DEF             4,"lit\,"
     5BE7             (              DEF):00001         @me                     set             *
5BE7 04               (              DEF):00002                                 fcb             4                                                               ;name length in bytes (MSB set = always execute)
5BE8 6C69742C         (              DEF):00003                                 fcc             "lit,"                                                          ;name
5BEC 5BD7             (              DEF):00004                                 fdb             _head
     5BE7             (              DEF):00005         _head           set             @me
5BEE ECA1             (         defs.asm):00125         complw          ldd             ,y++                                                    ;D = next word in list
5BF0 20EB             (         defs.asm):00126                                 bra             @compw                                                  ;store it in dict
                      (         defs.asm):00127         
                      (         defs.asm):00128         ; >>> Push literal word (at IP)
                      (         defs.asm):00129         ; PRODUCES: 0,PP = value of next word
5BF2 ECA1             (         defs.asm):00130         pushlw          ldd             ,y++                                                    ;Y = word value
5BF4 3406             (         defs.asm):00131                                 pshs    d
                      (         defs.asm):00132                                 NEXT
5BF6 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         defs.asm):00133         
                      (         defs.asm):00134         ; >>> Start a code word definition
                      (         defs.asm):00135         ; ASM: <name> ... NEXT;
                      (         defs.asm):00136         ; Stays in execute mode for word definition.
                      (         defs.asm):00137         ; Does NOT add JSR <words$ at start of definition.
                      (         defs.asm):00138         ; Intended for raw assembly code words.
                      (         defs.asm):00139                                 DEF             4,"ASM:"
     5BF8             (              DEF):00001         @me                     set             *
5BF8 04               (              DEF):00002                                 fcb             4                                                               ;name length in bytes (MSB set = always execute)
5BF9 41534D3A         (              DEF):00003                                 fcc             "ASM:"                                                          ;name
5BFD 5BE7             (              DEF):00004                                 fdb             _head
     5BF8             (              DEF):00005         _head           set             @me
                      (         defs.asm):00140                                 WORDS
5BFF 9D06             (            WORDS):00001                                 jsr             <words$
5C01 5B5A             (         defs.asm):00141                                 fdb             def$bgn
                      (         defs.asm):00142                                 DONE
5C03 500D             (             DONE):00001                                 fdb             done$
                      (         defs.asm):00143         
                      (         defs.asm):00144         ; >>> Ends a code word definition
                      (         defs.asm):00145         ; Assumes we're defining a code word.
                      (         defs.asm):00146         ; Compiles NEXT and finishes up the definition.
                      (         defs.asm):00147                                 DEF             5,"NEXT;"
     5C05             (              DEF):00001         @me                     set             *
5C05 05               (              DEF):00002                                 fcb             5                                                               ;name length in bytes (MSB set = always execute)
5C06 4E4558543B       (              DEF):00003                                 fcc             "NEXT;"                                                         ;name
5C0B 5BF8             (              DEF):00004                                 fdb             _head
     5C05             (              DEF):00005         _head           set             @me
                      (         defs.asm):00148                                 WORDS
5C0D 9D06             (            WORDS):00001                                 jsr             <words$
5C0F 5BEE6EB1         (         defs.asm):00149                                 fdb             complw,OP_NEXT                                  ;compile NEXT (JMP [,Y++])
5C13 5BA2             (         defs.asm):00150                                 fdb             def$end                                                 ;finalize definition
                      (         defs.asm):00151                                 DONE
5C15 500D             (             DONE):00001                                 fdb             done$
                      (         defs.asm):00152         
                      (         defs.asm):00153         ; >>> Find word's definition or bail
                      (         defs.asm):00154         ; find <name> -> <addr>
                      (         defs.asm):00155                                 DEF             4,"find"
     5C17             (              DEF):00001         @me                     set             *
5C17 04               (              DEF):00002                                 fcb             4                                                               ;name length in bytes (MSB set = always execute)
5C18 66696E64         (              DEF):00003                                 fcc             "find"                                                          ;name
5C1C 5C05             (              DEF):00004                                 fdb             _head
     5C17             (              DEF):00005         _head           set             @me
5C1E                  (         defs.asm):00156         find            WORDS
5C1E 9D06             (            WORDS):00001                                 jsr             <words$
5C20 51FF             (         defs.asm):00157                                 fdb             rd$sym                                                  ;get name to DP
5C22 5B165106562B5C2C (         defs.asm):00158                                 fdb             dp,defq,jf$,@nf                                 ;find in dictionary, jump if not found
                      (         defs.asm):00159                                 DONE
5C2A 500D             (             DONE):00001                                 fdb             done$
                      (         defs.asm):00160         ;
5C2C 50FB             (         defs.asm):00161         @nf                     fdb             bail$                                                   ;not found
5C2E 0B4E6F7420666F75 (         defs.asm):00162                                 fcb             11,'N','o','t',' ','f','o','u','n','d','!',BEL
     6E642107
                      (         defs.asm):00163         
                      (         defs.asm):00164         ; >>> Forget (delete) definitions
                      (         defs.asm):00165         ; forget <word>
                      (         defs.asm):00166                                 DEF             6,"forget"
     5C3A             (              DEF):00001         @me                     set             *
5C3A 06               (              DEF):00002                                 fcb             6                                                               ;name length in bytes (MSB set = always execute)
5C3B 666F72676574     (              DEF):00003                                 fcc             "forget"                                                                ;name
5C41 5C17             (              DEF):00004                                 fdb             _head
     5C3A             (              DEF):00005         _head           set             @me
                      (         defs.asm):00167                                 WORDS
5C43 9D06             (            WORDS):00001                                 jsr             <words$
5C45 5C1E             (         defs.asm):00168                                 fdb             find                                                    ;push addr of word or bail
5C47 5C4B             (         defs.asm):00169                                 fdb             @forget                                                 ;forget to that point
                      (         defs.asm):00170                                 DONE
5C49 500D             (             DONE):00001                                 fdb             done$
                      (         defs.asm):00171         ;
5C4B 3510             (         defs.asm):00172         @forget         puls    x                                                               ;X = start of word
5C4D BC0002           (         defs.asm):00173         forgetx$        cmpx    dp$
5C50 240C             (         defs.asm):00174                                 bhs             @fail                                                   ;if it's not in RAM DP space
                      (         defs.asm):00175         ;
5C52 9D25             (         defs.asm):00176                                 jsr             <set$dp                                                 ;else is new end of dict space
5C54 E680             (         defs.asm):00177                                 ldb             ,x+                                                             ;skip to link addr
5C56 3A               (         defs.asm):00178                                 abx
5C57 EC84             (         defs.asm):00179                                 ldd             ,x                                                              ;link is new head of defs
5C59 FD0004           (         defs.asm):00180                                 std             defs$
                      (         defs.asm):00181                                 NEXT
5C5C 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         defs.asm):00182         ;
5C5E 8E5C63           (         defs.asm):00183         @fail           ldx             #@msg
5C61 0E6D             (         defs.asm):00184                                 jmp             bailx_
5C63 0F556E666F726765 (         defs.asm):00185         @msg            fcb             15,'U','n','f','o','r','g','e','t','t','a','b','l','e','!',BEL
     747461626C652107
                      (    ./src/alf.asm):00078                                 include "strs.asm"
                      (         strs.asm):00001         ; "strs.asm" - string words for Alf
                      (         strs.asm):00002         ; 2022-nov-25 dww  created
                      (         strs.asm):00003         
                      (         strs.asm):00004         ; >>> Maximum string capacity constant
                      (         strs.asm):00005                                 DEF             4,"SCAP"
     5C73             (              DEF):00001         @me                     set             *
5C73 04               (              DEF):00002                                 fcb             4                                                               ;name length in bytes (MSB set = always execute)
5C74 53434150         (              DEF):00003                                 fcc             "SCAP"                                                          ;name
5C78 5C3A             (              DEF):00004                                 fdb             _head
     5C73             (              DEF):00005         _head           set             @me
5C7A                  (         strs.asm):00006         MAXSTR          CONST
5C7A 9D11             (            CONST):00001                                 jsr             <const$
5C7C 00FF             (         strs.asm):00007                                 fdb             STR_MAX_LEN
                      (         strs.asm):00008         
                      (         strs.asm):00009         ; >>> [VAR] Temp string buffer
                      (         strs.asm):00010                                 DEF             2,"s$"
     5C7E             (              DEF):00001         @me                     set             *
5C7E 02               (              DEF):00002                                 fcb             2                                                               ;name length in bytes (MSB set = always execute)
5C7F 7324             (              DEF):00003                                 fcc             "s$"                                                            ;name
5C81 5C73             (              DEF):00004                                 fdb             _head
     5C7E             (              DEF):00005         _head           set             @me
5C83                  (         strs.asm):00011         str$            VAR
5C83 9D11             (              VAR):00001                                 jsr             <var$
5C85 008D             (         strs.asm):00012                                 fdb             str$buf+1                                               ;push address of current length
                      (         strs.asm):00013         
                      (         strs.asm):00014         ; >>> Allocate max length string
                      (         strs.asm):00015                                 DEF             4,"STR:"
     5C87             (              DEF):00001         @me                     set             *
5C87 04               (              DEF):00002                                 fcb             4                                                               ;name length in bytes (MSB set = always execute)
5C88 5354523A         (              DEF):00003                                 fcc             "STR:"                                                          ;name
5C8C 5C7E             (              DEF):00004                                 fdb             _head
     5C87             (              DEF):00005         _head           set             @me
                      (         strs.asm):00016                                 WORDS
5C8E 9D06             (            WORDS):00001                                 jsr             <words$
5C90 5C7A             (         strs.asm):00017                                 fdb             MAXSTR
5C92 5C9F             (         strs.asm):00018                                 fdb             def$chars
                      (         strs.asm):00019                                 DONE
5C94 500D             (             DONE):00001                                 fdb             done$
                      (         strs.asm):00020         
                      (         strs.asm):00021         ; >>> Allocate string of specific max length
                      (         strs.asm):00022         ; <len> chars: <name>
                      (         strs.asm):00023                                 DEF             6,"CHARS:"
     5C96             (              DEF):00001         @me                     set             *
5C96 06               (              DEF):00002                                 fcb             6                                                               ;name length in bytes (MSB set = always execute)
5C97 43484152533A     (              DEF):00003                                 fcc             "CHARS:"                                                                ;name
5C9D 5C87             (              DEF):00004                                 fdb             _head
     5C96             (              DEF):00005         _head           set             @me
5C9F                  (         strs.asm):00024         def$chars       WORDS
5C9F 9D06             (            WORDS):00001                                 jsr             <words$
5CA1 5C7A5AE9         (         strs.asm):00025                                 fdb             MAXSTR,umin                                             ;limit length to max allowed
5CA5 5B5A             (         strs.asm):00026                                 fdb             def$bgn
5CA7 5BEE9D1D         (         strs.asm):00027                                 fdb             complw,OP_JSR_DP+chars$%256             ;compile JSR <chars$
5CAB 55155BCB513E5BCB (         strs.asm):00028                                 fdb             dup,compb,push0,compb                   ;compile max length, cur length (0)
5CB3 5BB9             (         strs.asm):00029                                 fdb             alloc$                                                  ;allocate space for string
5CB5 5BA2             (         strs.asm):00030                                 fdb             def$end                                                 ;finish up definition
                      (         strs.asm):00031                                 DONE
5CB7 500D             (             DONE):00001                                 fdb             done$
                      (         strs.asm):00032         
                      (         strs.asm):00033         ; >>> Compile a string
                      (         strs.asm):00034         ; CONSUMES: 0,PP = address of the string
5CB9 3510             (         strs.asm):00035         comps           puls    x                                                               ;X = source string addr
5CBB 3420             (         strs.asm):00036                                 pshs    y                                                               ;preserve IP
5CBD 10BE0002         (         strs.asm):00037                                 ldy             dp$                                                             ;Y = dest addr (assume there's enough space)
5CC1 6FA0             (         strs.asm):00038                                 clr             ,y+                                                             ;compile max length of 0
5CC3 E684             (         strs.asm):00039                                 ldb             ,x                                                              ;B = count
5CC5 5C               (         strs.asm):00040                                 incb                                                                    ;including length
                      (         strs.asm):00041         ;
5CC6 A680             (         strs.asm):00042         @lp                     lda             ,x+                                                             ;copy a byte
5CC8 A7A0             (         strs.asm):00043                                 sta             ,y+
5CCA 5A               (         strs.asm):00044                                 decb
5CCB 26F9             (         strs.asm):00045                                 bne             @lp
                      (         strs.asm):00046         ;
5CCD 10BF0002         (         strs.asm):00047                                 sty             dp$                                                             ;update DP
5CD1 9D28             (         strs.asm):00048                                 jsr             <mem$check                                              ;check for memory full
5CD3 3520             (         strs.asm):00049                                 puls    y                                                               ;restore IP
                      (         strs.asm):00050                                 NEXT
5CD5 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         strs.asm):00051         
                      (         strs.asm):00052         ; >>> Push literal string at current IP
                      (         strs.asm):00053         ; PRODUCES: 0,PP = addr of string, IP = addr after it
5CD7 3121             (         strs.asm):00054         pushls$         leay    1,y                                                             ;Y = address of cur length
5CD9 3420             (         strs.asm):00055                                 pshs    y                                                               ;push it
5CDB E6A0             (         strs.asm):00056                                 ldb             ,y+                                                             ;advance IP over it
5CDD 4F               (         strs.asm):00057                                 clra
5CDE 31AB             (         strs.asm):00058                                 leay    d,y
                      (         strs.asm):00059                                 NEXT
5CE0 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         strs.asm):00060         
                      (         strs.asm):00061         ; >>> Push max capacity of string
                      (         strs.asm):00062         ; CONSUMES: 0,PP = address of string cur length
                      (         strs.asm):00063         ; PRODUCES: 0,PP = max capacity of string (byte @ addr - 1)
                      (         strs.asm):00064                                 DEF             4,"scap"
     5CE2             (              DEF):00001         @me                     set             *
5CE2 04               (              DEF):00002                                 fcb             4                                                               ;name length in bytes (MSB set = always execute)
5CE3 73636170         (              DEF):00003                                 fcc             "scap"                                                          ;name
5CE7 5C96             (              DEF):00004                                 fdb             _head
     5CE2             (              DEF):00005         _head           set             @me
5CE9 AEE4             (         strs.asm):00065         scap            ldx             ,s                                                              ;X = addr of string cur len
5CEB E61F             (         strs.asm):00066                                 ldb             -1,x                                                    ;B = max capacity
5CED 4F               (         strs.asm):00067         @pushb          clra
5CEE EDE4             (         strs.asm):00068                                 std             ,s                                                              ;return B
                      (         strs.asm):00069                                 NEXT
5CF0 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         strs.asm):00070         ;
                      (         strs.asm):00071         ; >> Push current length of string
                      (         strs.asm):00072         ; CONSUMES: 0,PP = address of string cur len
                      (         strs.asm):00073         ; PRODUCES: 0,PP = string's current length
                      (         strs.asm):00074                                 DEF             4,"slen"
     5CF2             (              DEF):00001         @me                     set             *
5CF2 04               (              DEF):00002                                 fcb             4                                                               ;name length in bytes (MSB set = always execute)
5CF3 736C656E         (              DEF):00003                                 fcc             "slen"                                                          ;name
5CF7 5CE2             (              DEF):00004                                 fdb             _head
     5CF2             (              DEF):00005         _head           set             @me
5CF9 AEE4             (         strs.asm):00075         slen            ldx             ,s                                                              ;X = addr of strung cur len
5CFB E684             (         strs.asm):00076                                 ldb             ,x                                                              ;B = cur length
5CFD 20EE             (         strs.asm):00077                                 bra             @pushb
                      (         strs.asm):00078         
                      (         strs.asm):00079         ; >>> Push address of first data char of string
                      (         strs.asm):00080         ; CONSUMES: 0,PP = address of string
                      (         strs.asm):00081         ; PRODUCES: 0,PP = address of first data char of string
                      (         strs.asm):00082                                 DEF             4,"sdat"
     5CFF             (              DEF):00001         @me                     set             *
5CFF 04               (              DEF):00002                                 fcb             4                                                               ;name length in bytes (MSB set = always execute)
5D00 73646174         (              DEF):00003                                 fcc             "sdat"                                                          ;name
5D04 5CF2             (              DEF):00004                                 fdb             _head
     5CFF             (              DEF):00005         _head           set             @me
5D06 AEE4             (         strs.asm):00083         sdat            ldx             ,s                                                              ;X = addr of cur length
5D08 3001             (         strs.asm):00084                                 leax    1,x                                                             ;X = addr of first char
5D0A AFE4             (         strs.asm):00085                                 stx             ,s
                      (         strs.asm):00086                                 NEXT
5D0C 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         strs.asm):00087         
                      (         strs.asm):00088         ; >>> Push char at string index (or -1 if out of bounds)
                      (         strs.asm):00089         ; <str> <off> c@ --> <char> or -1
                      (         strs.asm):00090                                 DEF             2,"c@"
     5D0E             (              DEF):00001         @me                     set             *
5D0E 02               (              DEF):00002                                 fcb             2                                                               ;name length in bytes (MSB set = always execute)
5D0F 6340             (              DEF):00003                                 fcc             "c@"                                                            ;name
5D11 5CFF             (              DEF):00004                                 fdb             _head
     5D0E             (              DEF):00005         _head           set             @me
                      (         strs.asm):00091                                 WORDS
5D13 9D06             (            WORDS):00001                                 jsr             <words$
5D15 51485D66         (         strs.asm):00092                                 fdb             push1,ss                                                ;sanitize offset
5D19 5D1D             (         strs.asm):00093                                 fdb             @cat
                      (         strs.asm):00094                                 DONE
5D1B 500D             (             DONE):00001                                 fdb             done$
                      (         strs.asm):00095         ;
5D1D ECE1             (         strs.asm):00096         @cat            ldd             ,s++                                                    ;D = 0 if NG else 1
5D1F 270B             (         strs.asm):00097                                 beq             @fail                                                   ;if should return -1
5D21 3516             (         strs.asm):00098                                 puls    d,x                                                             ;X = string, D = index
5D23 3001             (         strs.asm):00099                                 leax    1,x                                                             ;skip length
5D25 E68B             (         strs.asm):00100                                 ldb             d,x
5D27 4F               (         strs.asm):00101                                 clra                                                                    ;D = char
5D28 3406             (         strs.asm):00102                                 pshs    d
                      (         strs.asm):00103                                 NEXT
5D2A 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         strs.asm):00104         ;
5D2C 3262             (         strs.asm):00105         @fail           leas    2,s                                                             ;clean up stack
5D2E CCFFFF           (         strs.asm):00106                                 ldd             #-1                                                             ;error result
5D31 EDE4             (         strs.asm):00107                                 std             ,s
                      (         strs.asm):00108                                 NEXT
5D33 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         strs.asm):00109         
                      (         strs.asm):00110         ; >>> Set char at index (ignored if invalid index)
                      (         strs.asm):00111         ; <char> <str> <off> c=
                      (         strs.asm):00112                                 DEF             2,"c="
     5D35             (              DEF):00001         @me                     set             *
5D35 02               (              DEF):00002                                 fcb             2                                                               ;name length in bytes (MSB set = always execute)
5D36 633D             (              DEF):00003                                 fcc             "c="                                                            ;name
5D38 5D0E             (              DEF):00004                                 fdb             _head
     5D35             (              DEF):00005         _head           set             @me
5D3A 3516             (         strs.asm):00113                                 puls    d,x                                                             ;D = off, X = string
                      (         strs.asm):00114         ;
5D3C 4D               (         strs.asm):00115                                 tsta
5D3D 2A07             (         strs.asm):00116                                 bpl             @val                                                    ;if not relative to end
5D3F 3406             (         strs.asm):00117                                 pshs    d
5D41 E684             (         strs.asm):00118                                 ldb             ,x
5D43 4F               (         strs.asm):00119                                 clra                                                                    ;D = cur length
5D44 E3E1             (         strs.asm):00120                                 addd    ,s++                                                    ;D = offset rel to start
                      (         strs.asm):00121         ;
5D46 4D               (         strs.asm):00122         @val            tsta
5D47 2614             (         strs.asm):00123                                 bne             @fail                                                   ;if def not a valid index
5D49 E11F             (         strs.asm):00124                                 cmpb    -1,x
5D4B 2410             (         strs.asm):00125                                 bhs             @fail                                                   ;if not within capacity
5D4D E180             (         strs.asm):00126                                 cmpb    ,x+
5D4F 2504             (         strs.asm):00127                                 blo             @set                                                    ;if is in current length
5D51 260A             (         strs.asm):00128                                 bne             @fail                                                   ;if not appending to end
5D53 6C1F             (         strs.asm):00129                                 inc             -1,x                                                    ;else adding char to end
                      (         strs.asm):00130         ;
5D55 308B             (         strs.asm):00131         @set            leax    d,x                                                             ;X = addr for store
5D57 3506             (         strs.asm):00132                                 puls    d                                                               ;B = char
5D59 E784             (         strs.asm):00133                                 stb             ,x
                      (         strs.asm):00134                                 NEXT
5D5B 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         strs.asm):00135         ;
5D5D 3262             (         strs.asm):00136         @fail           leas    2,s                                                             ;drop char
                      (         strs.asm):00137                                 NEXT
5D5F 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         strs.asm):00138         
                      (         strs.asm):00139         ; >>> Sanitize sub-string spec
                      (         strs.asm):00140         ; <str> <off> <len> ss -> <str> <off> <len>
                      (         strs.asm):00141         ; Pins sub-string within actual contents.
                      (         strs.asm):00142         ; Accepts negative offset as relative to end.
                      (         strs.asm):00143                                 DEF             2,"ss"
     5D61             (              DEF):00001         @me                     set             *
5D61 02               (              DEF):00002                                 fcb             2                                                               ;name length in bytes (MSB set = always execute)
5D62 7373             (              DEF):00003                                 fcc             "ss"                                                            ;name
5D64 5D35             (              DEF):00004                                 fdb             _head
     5D61             (              DEF):00005         _head           set             @me
5D66 AE64             (         strs.asm):00144         ss                      ldx             4,s                                                             ;X = string cur len address
5D68 4F               (         strs.asm):00145                                 clra
5D69 E684             (         strs.asm):00146                                 ldb             ,x
5D6B 3406             (         strs.asm):00147                                 pshs    d
                      (         strs.asm):00148         ;
                      (         strs.asm):00149         ; 0,s = cur length, 2,s = req length, 4,s = req offset, 6,s = str addr
                      (         strs.asm):00150         ;
5D6D EC64             (         strs.asm):00151                                 ldd             4,s                                                             ;D = requested offset
5D6F 2A02             (         strs.asm):00152                                 bpl             @offl                                                   ;if not relative to end
5D71 E3E4             (         strs.asm):00153                                 addd    ,s                                                              ;else convert to actual offset
                      (         strs.asm):00154         ;
                      (         strs.asm):00155         ; Pin offset to 0 <= off < cur len, adjust req len as needed
                      (         strs.asm):00156         ;
5D73 4D               (         strs.asm):00157         @offl           tsta                                                                    ;ensure off >= 0
5D74 2A06             (         strs.asm):00158                                 bpl             @offh
5D76 E362             (         strs.asm):00159                                 addd    2,s                                                             ;adjust req length
5D78 ED62             (         strs.asm):00160                                 std             2,s
5D7A 4F               (         strs.asm):00161                                 clra                                                                    ;and use offset of 0
5D7B 5F               (         strs.asm):00162                                 clrb
5D7C 10A3E4           (         strs.asm):00163         @offh           cmpd    ,s                                                              ;ensure off < cur len
5D7F 2506             (         strs.asm):00164                                 blo             @uoff
5D81 ECE4             (         strs.asm):00165                                 ldd             ,s                                                              ;force to end of string
5D83 6F62             (         strs.asm):00166                                 clr             2,s                                                             ;and set length to 0
5D85 6F63             (         strs.asm):00167                                 clr             3,s
5D87 ED64             (         strs.asm):00168         @uoff           std             4,s                                                             ;update offset to actual
                      (         strs.asm):00169         ;
                      (         strs.asm):00170         ; Pin length to 0 <= len <= cur len - off
                      (         strs.asm):00171         ;
5D89 EC62             (         strs.asm):00172                                 ldd             2,s                                                             ;D = requested length
5D8B 2A02             (         strs.asm):00173                                 bpl             @lenh                                                   ;if not negative
5D8D 4F               (         strs.asm):00174                                 clra
5D8E 5F               (         strs.asm):00175                                 clrb                                                                    ;else set length to 0
5D8F 3406             (         strs.asm):00176         @lenh           pshs    d
5D91 EC62             (         strs.asm):00177                                 ldd             2,s                                                             ;D = cur length
5D93 A366             (         strs.asm):00178                                 subd    6,s                                                             ;D = avail length
5D95 10A3E4           (         strs.asm):00179                                 cmpd    ,s                                                              ;req len <= avail?
5D98 2402             (         strs.asm):00180                                 bhs             @ulen                                                   ;yep
5D9A EDE4             (         strs.asm):00181                                 std             ,s                                                              ;else adjust req len
5D9C 3506             (         strs.asm):00182         @ulen           puls    d                                                               ;D = actual len
5D9E ED62             (         strs.asm):00183                                 std             2,s                                                             ;update req len to actual
5DA0 3262             (         strs.asm):00184                                 leas    2,s                                                             ;drop cur len
                      (         strs.asm):00185         ;
                      (         strs.asm):00186                                 NEXT
5DA2 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         strs.asm):00187         
                      (         strs.asm):00188         ; >>> Copy a string
                      (         strs.asm):00189         ; CONSUMES: 2,PP = source string, 0,PP = destination string
                      (         strs.asm):00190                                 DEF             4,"scpy"
     5DA4             (              DEF):00001         @me                     set             *
5DA4 04               (              DEF):00002                                 fcb             4                                                               ;name length in bytes (MSB set = always execute)
5DA5 73637079         (              DEF):00003                                 fcc             "scpy"                                                          ;name
5DA9 5D61             (              DEF):00004                                 fdb             _head
     5DA4             (              DEF):00005         _head           set             @me
                      (         strs.asm):00191                                 WORDS
5DAB 9D06             (            WORDS):00001                                 jsr             <words$
5DAD 557B             (         strs.asm):00192                                 fdb             rpush                                                   ;save dest string
5DAF 55155CF9513E5531 (         strs.asm):00193                                 fdb             dup,slen,push0,swap
5DB7 558C             (         strs.asm):00194                                 fdb             rpop                                                    ;<src> 0 <len> <dest>
5DB9 56205DE0         (         strs.asm):00195                                 fdb             jp$,sscpy$                                              ;rest same as substring copy
                      (         strs.asm):00196         
                      (         strs.asm):00197         ; >>> Append a string
                      (         strs.asm):00198         ; CONSUMES: 2,PP = source string, 0,PP = destination string
                      (         strs.asm):00199                                 DEF             4,"scat"
     5DBD             (              DEF):00001         @me                     set             *
5DBD 04               (              DEF):00002                                 fcb             4                                                               ;name length in bytes (MSB set = always execute)
5DBE 73636174         (              DEF):00003                                 fcc             "scat"                                                          ;name
5DC2 5DA4             (              DEF):00004                                 fdb             _head
     5DBD             (              DEF):00005         _head           set             @me
                      (         strs.asm):00200                                 WORDS
5DC4 9D06             (            WORDS):00001                                 jsr             <words$
5DC6 557B             (         strs.asm):00201                                 fdb             rpush                                                   ;save dest string
5DC8 55155CF9513E5531 (         strs.asm):00202                                 fdb             dup,slen,push0,swap
5DD0 558C             (         strs.asm):00203                                 fdb             rpop                                                    ;<src> 0 <len> <dest>
5DD2 56205DF4         (         strs.asm):00204                                 fdb             jp$,sscat$                                              ;rest same as substring append
                      (         strs.asm):00205         
                      (         strs.asm):00206         ; >>> Copy a substring
                      (         strs.asm):00207         ; <src> <off> <len> <dest> sscpy
                      (         strs.asm):00208                                 DEF             5,"sscpy"
     5DD6             (              DEF):00001         @me                     set             *
5DD6 05               (              DEF):00002                                 fcb             5                                                               ;name length in bytes (MSB set = always execute)
5DD7 7373637079       (              DEF):00003                                 fcc             "sscpy"                                                         ;name
5DDC 5DBD             (              DEF):00004                                 fdb             _head
     5DD6             (              DEF):00005         _head           set             @me
                      (         strs.asm):00209                                 WORDS
5DDE 9D06             (            WORDS):00001                                 jsr             <words$
5DE0 513E55595507     (         strs.asm):00210         sscpy$          fdb             push0,over,bstore                               ;empty dest string
5DE6 56205DF4         (         strs.asm):00211                                 fdb             jp$,sscat$                                              ;rest same as substring append
                      (         strs.asm):00212         
                      (         strs.asm):00213         ; >>> Append a substring
                      (         strs.asm):00214         ; <src> <off> <len> <dest> sscat
                      (         strs.asm):00215         ; This is the core string copy/append function
                      (         strs.asm):00216                                 DEF             5,"sscat"
     5DEA             (              DEF):00001         @me                     set             *
5DEA 05               (              DEF):00002                                 fcb             5                                                               ;name length in bytes (MSB set = always execute)
5DEB 7373636174       (              DEF):00003                                 fcc             "sscat"                                                         ;name
5DF0 5DD6             (              DEF):00004                                 fdb             _head
     5DEA             (              DEF):00005         _head           set             @me
5DF2                  (         strs.asm):00217         sscat           WORDS
5DF2 9D06             (            WORDS):00001                                 jsr             <words$
5DF4 557B5D66558C     (         strs.asm):00218         sscat$          fdb             rpush,ss,rpop                                   ;sanitize source substring
5DFA 5DFE             (         strs.asm):00219                                 fdb             @sscat$                                                 ;rest is machine code
                      (         strs.asm):00220                                 DONE
5DFC 500D             (             DONE):00001                                 fdb             done$
                      (         strs.asm):00221         ;
5DFE 3620             (         strs.asm):00222         @sscat$         pshu    y                                                               ;save IP
5E00 3520             (         strs.asm):00223                                 puls    y                                                               ;Y = destination string
                      (         strs.asm):00224         ;
                      (         strs.asm):00225         ; 0,s = req len, 2,s = req off, 4,s = source str, Y = dest string
                      (         strs.asm):00226         ; Assumes substring off, len have already been sanitized.
                      (         strs.asm):00227         ;
5E02 E63F             (         strs.asm):00228                                 ldb             -1,y                                                    ;B = dest capacity
5E04 E0A4             (         strs.asm):00229                                 subb    ,y                                                              ; - cur dest len
5E06 2401             (         strs.asm):00230                                 bcc             @avail                                                  ;if normal string
5E08 5F               (         strs.asm):00231                                 clrb                                                                    ;else r/o string, force avail to 0
5E09 4F               (         strs.asm):00232         @avail          clra                                                                    ;D = available space
                      (         strs.asm):00233         ;
5E0A 10A3E4           (         strs.asm):00234                                 cmpd    ,s                                                              ;pin length to available
5E0D 2402             (         strs.asm):00235                                 bhs             @mty?                                                   ;if req len is OK
5E0F EDE4             (         strs.asm):00236                                 std             ,s                                                              ;else trim req len to avail
5E11 6D61             (         strs.asm):00237         @mty?           tst             1,s                                                             ;len must be <= 255 here
5E13 271D             (         strs.asm):00238                                 beq             @done                                                   ;if nothing to do
                      (         strs.asm):00239         ;
5E15 E6A4             (         strs.asm):00240                                 ldb             ,y                                                              ;B = cur dest length
5E17 3404             (         strs.asm):00241                                 pshs    b
5E19 EB62             (         strs.asm):00242                                 addb    2,s                                                             ;update to final len
5E1B E7A0             (         strs.asm):00243                                 stb             ,y+
5E1D 3504             (         strs.asm):00244                                 puls    b
5E1F 31AB             (         strs.asm):00245                                 leay    d,y                                                             ;Y = dest addr
                      (         strs.asm):00246         ;
5E21 AE64             (         strs.asm):00247                                 ldx             4,s                                                             ;X = source string
5E23 EC62             (         strs.asm):00248                                 ldd             2,s
5E25 308B             (         strs.asm):00249                                 leax    d,x
5E27 3001             (         strs.asm):00250                                 leax    1,x                                                             ;X = source addr
5E29 E661             (         strs.asm):00251                                 ldb             1,s                                                             ;B = len to copy (1 - 255)
                      (         strs.asm):00252         ;
5E2B A680             (         strs.asm):00253         @cpylp          lda             ,x+                                                             ;copy a byte
5E2D A7A0             (         strs.asm):00254                                 sta             ,y+
5E2F 5A               (         strs.asm):00255                                 decb
5E30 26F9             (         strs.asm):00256                                 bne             @cpylp                                                  ;loop til done
                      (         strs.asm):00257         ;
5E32 3266             (         strs.asm):00258         @done           leas    6,s                                                             ;clean parms off stack
5E34 3720             (         strs.asm):00259                                 pulu    y                                                               ;restore IP
                      (         strs.asm):00260                                 NEXT
5E36 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         strs.asm):00261         
                      (         strs.asm):00262         ; >>> Formatted print.
                      (         strs.asm):00263         ; <args> <fmtstr> prf
                      (         strs.asm):00264         ; In format string:
                      (         strs.asm):00265         ;  %d = signed decimal, %u = unsigned decimal, %x = unsigned hex, %b = unsigned binary
                      (         strs.asm):00266         ;  %c = character, %s = string, %% = %, others ignored
                      (         strs.asm):00267         ; Args are taken off stack in REVERSE order (first printed is last pushed)
                      (         strs.asm):00268                                 DEF             3,"prf"
     5E38             (              DEF):00001         @me                     set             *
5E38 03               (              DEF):00002                                 fcb             3                                                               ;name length in bytes (MSB set = always execute)
5E39 707266           (              DEF):00003                                 fcc             "prf"                                                           ;name
5E3C 5DEA             (              DEF):00004                                 fdb             _head
     5E38             (              DEF):00005         _head           set             @me
5E3E 3620             (         strs.asm):00269         prfmt           pshu    y                                                               ;save IP
5E40 3520             (         strs.asm):00270                                 puls    y                                                               ;Y = format string
5E42 A6A0             (         strs.asm):00271                                 lda             ,y+                                                             ;A = char count
                      (         strs.asm):00272         ;
5E44 4D               (         strs.asm):00273         @lp                     tsta
5E45 2763             (         strs.asm):00274                                 beq             @done                                                   ;if end of string
5E47 4A               (         strs.asm):00275                                 deca
5E48 E6A0             (         strs.asm):00276                                 ldb             ,y+
5E4A C125             (         strs.asm):00277                                 cmpb    #'%'
5E4C 2709             (         strs.asm):00278                                 beq             @fmt                                                    ;if is format spec
5E4E 3402             (         strs.asm):00279                                 pshs    a                                                               ;else display char
5E50 BD545C           (         strs.asm):00280                                 jsr             prc_
5E53 3502             (         strs.asm):00281                                 puls    a
5E55 20ED             (         strs.asm):00282                                 bra             @lp
                      (         strs.asm):00283         ;
5E57 4D               (         strs.asm):00284         @fmt            tsta
5E58 2750             (         strs.asm):00285                                 beq             @done                                                   ;if hit end of string
5E5A 4A               (         strs.asm):00286                                 deca
5E5B E6A0             (         strs.asm):00287                                 ldb             ,y+                                                             ;B = format char
5E5D 3622             (         strs.asm):00288                                 pshu    a,y                                                             ;save count, string ptr
                      (         strs.asm):00289         ;
5E5F C164             (         strs.asm):00290                                 cmpb    #'d'
5E61 271C             (         strs.asm):00291                                 beq             @sdec                                                   ;if signed decimal
5E63 C175             (         strs.asm):00292                                 cmpb    #'u'
5E65 2725             (         strs.asm):00293                                 beq             @udec                                                   ;if unsigned decimal
5E67 C178             (         strs.asm):00294                                 cmpb    #'x'
5E69 2725             (         strs.asm):00295                                 beq             @uhex                                                   ;if unsigned hex
5E6B C162             (         strs.asm):00296                                 cmpb    #'b'
5E6D 2728             (         strs.asm):00297                                 beq             @ubin                                                   ;if unsigned binary
5E6F C163             (         strs.asm):00298                                 cmpb    #'c'
5E71 2729             (         strs.asm):00299                                 beq             @char                                                   ;if character
5E73 C173             (         strs.asm):00300                                 cmpb    #'s'
5E75 272C             (         strs.asm):00301                                 beq             @str                                                    ;if string
5E77 C125             (         strs.asm):00302                                 cmpb    #'%'
5E79 2723             (         strs.asm):00303                                 beq             @prc                                                    ;if escaped percent
                      (         strs.asm):00304         ;
5E7B 3722             (         strs.asm):00305         @efmt           pulu    a,y                                                             ;restore count, ptr
5E7D 20C5             (         strs.asm):00306                                 bra             @lp
                      (         strs.asm):00307         ;
5E7F 3506             (         strs.asm):00308         @sdec           puls    d                                                               ;signed decimal
5E81 BD5868           (         strs.asm):00309                                 jsr             prsign_                                                 ;display sign if necessary
5E84 8E000A           (         strs.asm):00310         @prd            ldx             #10                                                             ;display in decimal
5E87 BD5887           (         strs.asm):00311         @prn            jsr             prnum_
5E8A 20EF             (         strs.asm):00312                                 bra             @efmt
                      (         strs.asm):00313         ;
5E8C 3506             (         strs.asm):00314         @udec           puls    d                                                               ;display unsigned decimal
5E8E 20F4             (         strs.asm):00315                                 bra             @prd
                      (         strs.asm):00316         ;
5E90 8E0010           (         strs.asm):00317         @uhex           ldx             #16                                                             ;display unsigned hex
5E93 3506             (         strs.asm):00318         @pru            puls    d
5E95 20F0             (         strs.asm):00319                                 bra             @prn
                      (         strs.asm):00320         ;
5E97 8E0002           (         strs.asm):00321         @ubin           ldx             #2                                                              ;display unsigned binary
5E9A 20F7             (         strs.asm):00322                                 bra             @pru
                      (         strs.asm):00323         ;
5E9C 3506             (         strs.asm):00324         @char           puls    d                                                               ;display character
5E9E BD545C           (         strs.asm):00325         @prc            jsr             prc_
5EA1 20D8             (         strs.asm):00326                                 bra             @efmt
                      (         strs.asm):00327         ;
5EA3 3510             (         strs.asm):00328         @str            puls    x                                                               ;display string
5EA5 BD549F           (         strs.asm):00329                                 jsr             prs_
5EA8 20D1             (         strs.asm):00330                                 bra             @efmt
                      (         strs.asm):00331         ;
5EAA 3720             (         strs.asm):00332         @done           pulu    y                                                               ;restore IP
                      (         strs.asm):00333                                 NEXT
5EAC 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         strs.asm):00334         
                      (         strs.asm):00335         ; >>> Convert char to upper case
                      (         strs.asm):00336         ; <char> cupper
                      (         strs.asm):00337                                 DEF             6,"cupper"
     5EAE             (              DEF):00001         @me                     set             *
5EAE 06               (              DEF):00002                                 fcb             6                                                               ;name length in bytes (MSB set = always execute)
5EAF 637570706572     (              DEF):00003                                 fcc             "cupper"                                                                ;name
5EB5 5E38             (              DEF):00004                                 fdb             _head
     5EAE             (              DEF):00005         _head           set             @me
5EB7 ECE4             (         strs.asm):00338         cupper          ldd             ,s                                                              ;B = char
5EB9 8D04             (         strs.asm):00339                                 bsr             cupper_                                                 ;convert to upper case
5EBB EDE4             (         strs.asm):00340                                 std             ,s
                      (         strs.asm):00341                                 NEXT
5EBD 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (         strs.asm):00342         ;
5EBF C161             (         strs.asm):00343         cupper_         cmpb    #'a'
5EC1 2506             (         strs.asm):00344                                 blo             @ret                                                    ;if not lower case
5EC3 C17A             (         strs.asm):00345                                 cmpb    #'z'
5EC5 2202             (         strs.asm):00346                                 bhi             @ret                                                    ;ditto
5EC7 C820             (         strs.asm):00347                                 eorb    #$20                                                    ;convert to upper
5EC9 39               (         strs.asm):00348         @ret            rts
                      (         strs.asm):00349         ;
                      (         strs.asm):00350         ; >>> Compare strings (case significant)
                      (         strs.asm):00351         ; <s1> <s2> scmp -> -1 | 0 | 1
                      (         strs.asm):00352         ; -1 = <s1> < <s2>, 0 = <s1> == <s2>, 1 = <s1> > <s2>
                      (         strs.asm):00353                                 DEF             4,"scmp"
     5ECA             (              DEF):00001         @me                     set             *
5ECA 04               (              DEF):00002                                 fcb             4                                                               ;name length in bytes (MSB set = always execute)
5ECB 73636D70         (              DEF):00003                                 fcc             "scmp"                                                          ;name
5ECF 5EAE             (              DEF):00004                                 fdb             _head
     5ECA             (              DEF):00005         _head           set             @me
5ED1 CC5EC9           (         strs.asm):00354                                 ldd             #@ret                                                   ;D = do nothing function
5ED4 200B             (         strs.asm):00355                                 bra             @scmp
                      (         strs.asm):00356         ;
                      (         strs.asm):00357         ; >>> Compare strings ignoring case
                      (         strs.asm):00358         ; <s1> <s2> scmp -> -1 | 0 | 1
                      (         strs.asm):00359         ; -1 = <s1> < <s2>, 0 = <s1> == <s2>, 1 = <s1> > <s2>
                      (         strs.asm):00360                                 DEF             5,"scmpi"
     5ED6             (              DEF):00001         @me                     set             *
5ED6 05               (              DEF):00002                                 fcb             5                                                               ;name length in bytes (MSB set = always execute)
5ED7 73636D7069       (              DEF):00003                                 fcc             "scmpi"                                                         ;name
5EDC 5ECA             (              DEF):00004                                 fdb             _head
     5ED6             (              DEF):00005         _head           set             @me
5EDE CC5EBF           (         strs.asm):00361                                 ldd             #cupper_                                                ;D = convert char to upper case
                      (         strs.asm):00362         ;
5EE1 3620             (         strs.asm):00363         @scmp           pshu    y                                                               ;save IP
5EE3 3530             (         strs.asm):00364                                 puls    x,y                                                             ;Y = <s1>, X = <s2>
5EE5 3406             (         strs.asm):00365                                 pshs    d                                                               ;0,s = normalize char function
                      (         strs.asm):00366         ;
5EE7 A6A0             (         strs.asm):00367                                 lda             ,y+                                                             ;compare lengths
5EE9 A180             (         strs.asm):00368                                 cmpa    ,x+
5EEB 251C             (         strs.asm):00369                                 blo             @lt                                                             ;if <s1> length < <s2> length
5EED 221E             (         strs.asm):00370                                 bhi             @gt                                                             ;if <s1> lrngth > <s2> length
5EEF 4D               (         strs.asm):00371                                 tsta
5EF0 2714             (         strs.asm):00372                                 beq             @eq                                                             ;if both empty
                      (         strs.asm):00373         ;
5EF2 E680             (         strs.asm):00374         @scmplp         ldb             ,x+                                                             ;B = next <s2> char
5EF4 ADF4             (         strs.asm):00375                                 jsr             [,s]                                                    ;normalize it
5EF6 3404             (         strs.asm):00376                                 pshs    b
5EF8 E6A0             (         strs.asm):00377                                 ldb             ,y+                                                             ;B = next <s1> char
5EFA ADF801           (         strs.asm):00378                                 jsr             [1,s]                                                   ;normalize it
5EFD E1E0             (         strs.asm):00379                                 cmpb    ,s+
5EFF 2508             (         strs.asm):00380                                 blo             @lt                                                             ;if <s1> < <s2>
5F01 220A             (         strs.asm):00381                                 bhi             @gt                                                             ;if <s1> > <s2>
5F03 4A               (         strs.asm):00382                                 deca
5F04 26EC             (         strs.asm):00383                                 bne             @scmplp                                                 ;if not done yet
                      (         strs.asm):00384         ;
5F06 5F               (         strs.asm):00385         @eq                     clrb                                                                    ;equal, return 0
5F07 2006             (         strs.asm):00386                                 bra             @res
5F09 C6FF             (         strs.asm):00387         @lt                     ldb             #-1                                                             ;less, return -1
5F0B 2002             (         strs.asm):00388                                 bra             @res
5F0D C601             (         strs.asm):00389         @gt                     ldb             #1                                                              ;greater, return 1
5F0F 1D               (         strs.asm):00390         @res            sex
5F10 EDE4             (         strs.asm):00391                                 std             ,s                                                              ;replace fn with result
5F12 3720             (         strs.asm):00392                                 pulu    y                                                               ;restore IP
                      (         strs.asm):00393                                 NEXT
5F14 6EB1             (             NEXT):00001                                 jmp             [,y++]
                      (    ./src/alf.asm):00079                                 include "vars.asm"
                      (         vars.asm):00001         ; "vars.asm" - variables for Alf
                      (         vars.asm):00002         ; 2022-dec-22 dww created.
                      (         vars.asm):00003         
                      (         vars.asm):00004         ; >>> Define a word that pushes a constant (16 bit) value
                      (         vars.asm):00005         ; <expr> val: <name>
                      (         vars.asm):00006                                 DEF             4,"VAL:"
     5F16             (              DEF):00001         @me                     set             *
5F16 04               (              DEF):00002                                 fcb             4                                                               ;name length in bytes (MSB set = always execute)
5F17 56414C3A         (              DEF):00003                                 fcc             "VAL:"                                                          ;name
5F1B 5ED6             (              DEF):00004                                 fdb             _head
     5F16             (              DEF):00005         _head           set             @me
                      (         vars.asm):00007                                 WORDS
5F1D 9D06             (            WORDS):00001                                 jsr             <words$
5F1F 5B5A             (         vars.asm):00008                                 fdb             def$bgn                                                 ;compile word header
5F21 5BEE9D11         (         vars.asm):00009                                 fdb             complw,OP_JSR_DP+const$%256             ;compile JSR <const$
5F25 5BDB             (         vars.asm):00010                                 fdb             compw                                                   ;compile value from stack
5F27 5BA2             (         vars.asm):00011                                 fdb             def$end                                                 ;finalize it
                      (         vars.asm):00012                                 DONE
5F29 500D             (             DONE):00001                                 fdb             done$
                      (         vars.asm):00013         
                      (         vars.asm):00014         ; Define a variable that can hold a 16 bit word (and pushes it's address)
                      (         vars.asm):00015         ; var: <name>
                      (         vars.asm):00016                                 DEF             4,"VAR:"
     5F2B             (              DEF):00001         @me                     set             *
5F2B 04               (              DEF):00002                                 fcb             4                                                               ;name length in bytes (MSB set = always execute)
5F2C 5641523A         (              DEF):00003                                 fcc             "VAR:"                                                          ;name
5F30 5F16             (              DEF):00004                                 fdb             _head
     5F2B             (              DEF):00005         _head           set             @me
                      (         vars.asm):00017                                 WORDS
5F32 9D06             (            WORDS):00001                                 jsr             <words$
5F34 5B5A             (         vars.asm):00018                                 fdb             def$bgn                                                 ;compile word header
5F36 5BEE9D0B         (         vars.asm):00019                                 fdb             complw,OP_JSR_DP+next$%256              ;compile JSR <next$ (pushes addr)
5F3A 513E5BDB         (         vars.asm):00020                                 fdb             push0,compw                                             ;compile 0 (initial value)
5F3E 5BA2             (         vars.asm):00021                                 fdb             def$end                                                 ;finalize it
                      (         vars.asm):00022                                 DONE
5F40 500D             (             DONE):00001                                 fdb             done$
                      (         vars.asm):00023         
                      (         vars.asm):00024         ; Define a variable that can hold an 8 bit byte (and pushes it's address)
                      (         vars.asm):00025         ; var: <name>
                      (         vars.asm):00026                                 DEF             5,"BYTE:"
     5F42             (              DEF):00001         @me                     set             *
5F42 05               (              DEF):00002                                 fcb             5                                                               ;name length in bytes (MSB set = always execute)
5F43 425954453A       (              DEF):00003                                 fcc             "BYTE:"                                                         ;name
5F48 5F2B             (              DEF):00004                                 fdb             _head
     5F42             (              DEF):00005         _head           set             @me
                      (         vars.asm):00027                                 WORDS
5F4A 9D06             (            WORDS):00001                                 jsr             <words$
5F4C 5B5A             (         vars.asm):00028                                 fdb             def$bgn                                                 ;compile word header
5F4E 5BEE9D0B         (         vars.asm):00029                                 fdb             complw,OP_JSR_DP+next$%256              ;compile JSR <next$ (pushes addr)
5F52 513E5BCB         (         vars.asm):00030                                 fdb             push0,compb                                             ;compile 0 (initial value)
5F56 5BA2             (         vars.asm):00031                                 fdb             def$end                                                 ;finalize it
                      (         vars.asm):00032                                 DONE
5F58 500D             (             DONE):00001                                 fdb             done$
                      (         vars.asm):00033         
                      (         vars.asm):00034         ; Define a variable that can hold N bytes (and pushes addr of start)
                      (         vars.asm):00035         ; <count> bytes: <name>
                      (         vars.asm):00036                                 DEF             6,"BYTES:"
     5F5A             (              DEF):00001         @me                     set             *
5F5A 06               (              DEF):00002                                 fcb             6                                                               ;name length in bytes (MSB set = always execute)
5F5B 42595445533A     (              DEF):00003                                 fcc             "BYTES:"                                                                ;name
5F61 5F42             (              DEF):00004                                 fdb             _head
     5F5A             (              DEF):00005         _head           set             @me
                      (         vars.asm):00037                                 WORDS
5F63 9D06             (            WORDS):00001                                 jsr             <words$
5F65 5B5A             (         vars.asm):00038                                 fdb             def$bgn                                                 ;compile word header
5F67 5BEE9D0B         (         vars.asm):00039                                 fdb             complw,OP_JSR_DP+next$%256              ;compile JSR <next$ (pushes addr)
5F6B 5BB9             (         vars.asm):00040                                 fdb             alloc$                                                  ;allocate space
5F6D 5BA2             (         vars.asm):00041                                 fdb             def$end                                                 ;finalize it
                      (         vars.asm):00042                                 DONE
5F6F 500D             (             DONE):00001                                 fdb             done$
                      (    ./src/alf.asm):00080         ;
     5F71             (    ./src/alf.asm):00081         alf_end$        equ             *                                               ;end of all code
     5F5A             (    ./src/alf.asm):00082         alf_defs$       equ             _head                                   ;last defined word
                      (    ./src/alf.asm):00083         
                      (    ./src/alf.asm):00084                                 end
